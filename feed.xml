<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>simonguest.com</title>
    <atom:link href="feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>/</link>
    <description>The only person allowed to login as 'guest'</description>
    <pubDate>Mon, 05 May 2014 12:17:59 -0700</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>GIDS 2014</title>
      <link>//2014/05/05/gids-2014/</link>
      <pubDate>Mon, 05 May 2014 12:17:59 -0700</pubDate>
      <guid isPermaLink="true">//2014/05/05/gids-2014/</guid>
      <author></author>
      <description>&lt;p&gt;A couple of weeks ago, I had the privilege of speaking at &lt;a href=&quot;http://www.developermarch.com/developersummit/about.html&quot;&gt;GIDS&lt;/a&gt; (the Great Indian Developer Summit) 2014 in Bangalore. GIDS is a multi-day event, with each day dedicated to a particular theme or topic. I spoke on the Wednesday (the Web/Mobile day) and had three sessions covering mobile app development using iBeacons, tips and tricks using AngularJS, and automated Web testing using JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Thanks to everyone who came to each of the sessions. I really enjoyed the feedback and audience participation, and look forward to similar sessions in the future. I’ve included links to the three decks below on Slideshare, and have posted all of the source code &lt;a href=&quot;http://github.com/simonguest/gids&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/simonguest/indoor-location-in-mobile-applications-using-i-beacons&quot;&gt;&lt;img src=&quot;/articles/gids-2014/ibeacons.jpg&quot; alt=&quot;Indoor location in mobile applications using iBeacons&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/simonguest/advanced-tips-tricks-for-using-angular-js&quot;&gt;&lt;img src=&quot;/articles/gids-2014/angularjs.jpg&quot; alt=&quot;Advanced Tips &amp;amp; Tricks for using Angular JS&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/simonguest/automated-web-testing-using-javascript&quot;&gt;&lt;img src=&quot;/articles/gids-2014/webtesting.jpg&quot; alt=&quot;Automated Web Testing using JavaScript&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Bluetooth Issues on Mavericks</title>
      <link>//2014/03/28/bluetooth-issues-on-mavericks/</link>
      <pubDate>Fri, 28 Mar 2014 16:32:02 -0700</pubDate>
      <guid isPermaLink="true">//2014/03/28/bluetooth-issues-on-mavericks/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve been having some issues recently with the Bluetooth stack on my Mac acting strangely - causing Bluetooth devices to drop at random times and on occasions, the default mouse and keyboard will stop working even though the machine is running fine. One of the symptoms of this has been the bluetooth preferences pane showing “do not localize” when things become corrupt.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I think (well, I hope) I’ve solved it by performing an SMC and NVRAM reset on the Mac. In case other are seeing similar symptoms, I wanted to share how you do these resets:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SMC Reset:&lt;/strong&gt; Power down the Mac. Hold down Shift-Control-Option and the power button for a few seconds. Not much will happen. Release all of the keys, and power on normally.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NVRAM Reset:&lt;/strong&gt; Power down the Mac. Hold Command, P and R down and power on the Mac. The Mac will boot for a few seconds and then reboot. Release all of the keys at this point, and boot normally.&lt;/p&gt;
&lt;p&gt;After doing these resets, the Bluetooth stack seems a lot more stable.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Automated Web Testing using JavaScript</title>
      <link>//2014/03/27/automated-web-testing-using-javascript/</link>
      <pubDate>Thu, 27 Mar 2014 13:22:01 -0700</pubDate>
      <guid isPermaLink="true">//2014/03/27/automated-web-testing-using-javascript/</guid>
      <author></author>
      <description>&lt;p&gt;The process of creating automated tests for Web applications has been around for many years. Vendors such as HP, Parasoft, QFS, and even Microsoft have test software that can be used to create and run automated tests. Over the past couple of years however, we’ve seen an industry-trend towards open source Web testing solutions based on JavaScript. Such solutions have the advantage of being easily modified, free to download, very modular, supported by a vibrant community, and (given the popularity of client-side JavaScript) tests can often be written using the same language as the Web application. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For this blog post, I wanted to share some of our observations at Neudesic, and some of the tools that we’ve had success with during recent projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unit Tests or Assertions?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before considering any unit test, one of the questions we try to ask is whether the same functionality can be provided by an assertion. An assertion is, in its simplest form, code in your application that asserts that some condition is true – and if it’s false, stops the application and/or reports an error message.&lt;/p&gt;
&lt;p&gt;The easiest way to perform an assertion in JavaScript is with the &lt;strong&gt;console.assert&lt;/strong&gt; function. This is supported on the latest version of most major browsers (Chrome, Safari, and IE 10 upwards). A simple use of console.assert might look as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;{&lt;/span&gt;
  console.assert(x, &lt;span class=&quot;string&quot;&gt;'X should not be undefined'&lt;/span&gt;);
  &lt;span class=&quot;comment&quot;&gt;/* rest of method goes here */&lt;/span&gt;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As shown above, this is the simplest form of an assertion, yet quite effective. More importantly, it also negates the need to have a redundant unit test that checks whether the value of x is null, resulting in fewer tests that simply do assertion checking. There are many developers who use assertions during development and then strip out the assertions for production. While this has some merit, a more productive approach can be to create your own assertion function. This might look something like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;{&lt;/span&gt;
  assert(x, &lt;span class=&quot;string&quot;&gt;'X should not be undefined'&lt;/span&gt;);
  &lt;span class=&quot;comment&quot;&gt;/* rest of method goes here */&lt;/span&gt;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As shown above, instead of calling console.assert we call a custom function. This has the advantage that in development mode we can inject an assert function that writes to the console or adds a breakpoint in code, whereas in production mode we might choose to display a more friendly error message to the user and potentially log the crash via an analytics service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;QUnit&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assertions are useful for performing simple checks on methods, but there will likely come a time where you need to perform more rigorous tests of logic, using a unit test. &lt;a href=&quot;http://qunitjs.com&quot;&gt;QUnit&lt;/a&gt; is a popular JavaScript framework for unit testing, whose origins come from jQuery and jQuery UI. QUnit works by defining a set of tests that are run within the QUnit test runner (which itself is just a Web page). Unit tests are simple, and follow a format similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;test(&amp;#39;a basic test example&amp;#39;, function() {
  var value = &amp;#39;hello&amp;#39;;
  equal(value, ‘hello&amp;#39;, &amp;#39;We expect value to be hello&amp;#39;);
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are new to unit testing in JavaScript, and starting out by writing simple single page tests, QUnit is a good way to get started.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jasmine and Karma&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While QUnit provides a good introduction to unit testing, it is easy to quickly reach a limit, especially if your application has a lot of tests nested in a hierarchy. In addition, QUnit does not typically provide any CI (Continuous Integration) functionality out of the box. As you increase your familiarity with unit testing using JavaScript, it is well worth checking out &lt;a href=&quot;http://jasmine.github.io&quot;&gt;Jasmine&lt;/a&gt; and &lt;a href=&quot;http://karma-runner.github.io&quot;&gt;Karma&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Jasmine is a BDD-style framework for writing tests. While similar to the QUnit construct, the syntax tends to be cleaner and more widely adopted in the JavaScript community:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;describe(&lt;span class=&quot;string&quot;&gt;'a basic test example'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  it(&lt;span class=&quot;string&quot;&gt;'tests that true is always the truth'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  expect(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;).toBe(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As can be shown in the example above, the describe, it, and expect keywords work with unit tests, but also apply to BDD style tests also – making Jasmine a good candidate for writing tests of both types. Jasmine is just a language syntax and by design doesn’t offer any test runner implementation. Fortunately, there are a number of test runners available that can run Jasmine tests. One such framework gaining adoption is Karma, a test framework developed by the AngularJS team at Google.&lt;/p&gt;
&lt;p&gt;Karma, which used to be called Testacular (insert your joke here about why the name changed!), is a flexible test framework that can be used to call unit tests written in Jasmine and other frameworks. Karma is very lightweight, which means it works well in CI (Continuous Integration) settings, even to the point where it’s possible to have Karma invoke a series of tests after each file save on your development machine. While there are many different test runners capable of executing unit tests, I believe Karma adoption will continue to grow, and this should be something that you should look at for your own testing needs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Selenium&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unit testing is useful for testing discreet logic in your application, but falls short of telling you whether the application is working correctly for the user in their environment – i.e. through their browser. To do this we need to turn to integration testing – testing the end to end operation of your Web application. &lt;a href=&quot;http://seleniumhq.org&quot;&gt;Selenium&lt;/a&gt; is an open source project that has been in development for the past 10 years, originally developed by &lt;a href=&quot;http://thoughtworks.com&quot;&gt;ThoughtWorks&lt;/a&gt; as a replacement for Mercurial (hence the name, as Selenium is often used to cure Mercury poisoning!).&lt;/p&gt;
&lt;p&gt;Today, Selenium has three major components: Selenium IDE, Selenium WebDriver, and Selenium Grid.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Selenium IDE&lt;/strong&gt; is a browser extension for Firefox that enables you to record a series of actions and test assertions via a “recording function” in the browser. By default, the test gets written to a HTML-based test suite, and can be replayed at any time. While Selenium IDE is a useful tool for investigating the underlying operations of the testing platform, it is not well suited for use in production – the tests don’t support inheritance, which makes management of the tests difficult, especially when things change in your application. Moreover, the tests have to be run through the Firefox browser, which makes true automation difficult.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Selenium WebDriver&lt;/strong&gt; (which used to be Selenium RC) is a server-side version of the Selenium testing platform that does support scripted tests. WebDriver (based on the emerging WebDriver spec, hence the name), runs as a Java service and accepts incoming TCP socket connections from test clients. Upon receiving a connection, the service invokes a browser, runs the tests, and reports status back to the client via the socket. Any test platform that implements the &lt;a href=&quot;https://dvcs.w3.org/hg/webdriver/raw-file/default/webdriver-spec.html&quot;&gt;WebDriver specification&lt;/a&gt; can issue tests to a Selenium server.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Selenium Grid&lt;/strong&gt; is a service where multiple Selenium servers can be clustered to handle a high volume of tests. It is often used by service providers (such as SauceLabs) who are offering testing services to multiple clients.&lt;/p&gt;
&lt;p&gt;For many projects, Selenium WebDriver makes the most sense. In order to use WebDriver with Jasmine however, you still need to have a test runner (remember that Jasmine doesn’t provide any test platform). Karma is not a fit here as it is best suited for unit tests, not end-to-end tests (as it happens, the documentation actually discourages the use of Karma for integration testing). To solve this, we turn to another testing framework from Google, &lt;a href=&quot;http://github.com/angular/protractor&quot;&gt;Protractor&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Protractor&lt;/strong&gt; is an end-to-end test framework, typically used to test &lt;a href=&quot;http://angularjs.org&quot;&gt;AngularJS&lt;/a&gt; applications – although any Web application can be tested as protractor contains methods to call the underlying WebDriver implementation. It is built upon a library called &lt;a href=&quot;https://code.google.com/p/selenium/wiki/WebDriverJs&quot;&gt;WebDriverJS&lt;/a&gt;, a JavaScript-implementation of the WebDriver client, which makes it wire compatible with Selenium WebDriver. Protractor is simple to install, and supports Jasmine as it’s primary test language. A test using protractor might look as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;describe(&lt;span class=&quot;string&quot;&gt;'test hello world home page'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
  it(&lt;span class=&quot;string&quot;&gt;'should greet the named user'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    browser.get(&lt;span class=&quot;string&quot;&gt;'http://www.angularjs.org'&lt;/span&gt;);
    element(by.model(&lt;span class=&quot;string&quot;&gt;'yourName'&lt;/span&gt;)).sendKeys(&lt;span class=&quot;string&quot;&gt;'Simon'&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; greeting = element(by.binding(&lt;span class=&quot;string&quot;&gt;'yourName'&lt;/span&gt;));
    expect(greeting.getText()).toEqual(&lt;span class=&quot;string&quot;&gt;'Hello Simon!'&lt;/span&gt;);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see above, this simple test will open a Web page, look for a data binding called ‘yourName’, send a name to it, and then assert that the greeting replied is correct. You should note that the model and binding above are specific to AngularJS, and (if you are not using AngularJS) can be replaced with similar lookups based on HTML ID, CSS, or XPATH query. Using the protractor test runner, this test can be sent to an instance of Selenium, which in turn will invoke a new browser, run the test, and report back the results to the client.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDEs for Creating Protractor Tests. &lt;/strong&gt;While creating tests is a manual process today, there are several open source projects with a goal of being able to generate protractor-based tests from a more visual interface. One such tool is &lt;a href=&quot;http://sebuilder.github.io/se-builder/&quot;&gt;Selenium Builder&lt;/a&gt;, which while still in Alpha, looks very promising.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using Page Objects.&lt;/strong&gt; While Jasmine and Protractor offer a very quick way of creating and running tests, you often need to be careful to manage the tests that you create. If you make a simple change in the UI, you want to avoid a situation where you need to change many tests. One way of overcoming this is to use &lt;a href=&quot;https://github.com/angular/protractor/blob/master/docs/getting-started.md#organizing-real-tests-page-objects&quot;&gt;Page Objects&lt;/a&gt; when using Protractor. A Page Object is, by definition, a JavaScript class that defines methods on a page.&lt;/p&gt;
&lt;p&gt;These methods might be AddCustomer, DeleteCustomer, ModifyCustomer, etc. The tests then call these page objects to perform the function. For example, AddCustomer(valid), AddCustomer(invalid), AddCustomer(invalid2), etc. This approach offers many advantages, especially if the page changes. If a change to page occurs, only the page object has to be changed once, which makes maintenance and re-use throughout the tests more predictable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PhantomJS.&lt;/strong&gt; Finally, as we discussed previously, Selenium works by invoking a new browser process in order to run tests. While this is useful on your development machine, there are times where you may want to invoke tests that do not have access to a fully installed browser – for example, if you are doing server-side tests on a Linux or a &lt;a href=&quot;http://docker.io&quot;&gt;Docker&lt;/a&gt; instance without a UI installed. To accomplish this, &lt;a href=&quot;http://phantomjs.org&quot;&gt;PhantomJS&lt;/a&gt; can be used. PhantomJS is a headless version of WebKit written in Qt, and can act as a browser without any of the UI overhead associated with actually launching a browser.&lt;/p&gt;
&lt;p&gt;PhantomJS can be invoked in one of two ways – either plugged directly into Selenium as an alternative browser process – or, because PhantomJS implements &lt;a href=&quot;https://github.com/detro/ghostdriver&quot;&gt;GhostDriver&lt;/a&gt; (wire level compatibility with WebDriver), it can be called directly from Protractor. PhantomJS is still in early development stages (and at the time of writing being ported to Qt5), but looks to offer a lot of potential for developers who are looking to do integration testing in a headless environment.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>File &gt; New &gt; Presentation</title>
      <link>//2014/01/27/file-new-presentation/</link>
      <pubDate>Mon, 27 Jan 2014 08:51:57 -0800</pubDate>
      <guid isPermaLink="true">//2014/01/27/file-new-presentation/</guid>
      <author></author>
      <description>&lt;p&gt;About a year ago, I set out on a journey to write a book on presentation skills, aimed primarily towards software developers and other technical professionals. My reasoning is that too many presentations in our industry still fail to connect with their audience, don’t tell a story, and end up as a set of mind-numbing slides of bullet points that put people to sleep.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The book, aptly titled ‘File &amp;gt; New &amp;gt; Presentation’, was released last November, and reviews have started to appear in the New Year - a few on &lt;a href=&quot;http://www.amazon.com/File-New-Presentation-Developers-Professionals-ebook/dp/B00GEH9FHM&quot;&gt;Amazon&lt;/a&gt;, and &lt;a href=&quot;http://www.joshholmes.com/blog/2014/01/26/file-new-presentation-a-review/&quot;&gt;this one&lt;/a&gt; by Josh Holmes, who presented about the subject at CodeMash earlier this month.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/file-new-presentation/bookcover.png&quot; alt=&quot;Book Cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you are a developer (or other technical professional), looking to improve your presentation skills, I hope you’ll check out the book. You can find it on &lt;a href=&quot;http://www.amazon.com/File-New-Presentation-Developers-Professionals-ebook/dp/B00GEH9FHM&quot;&gt;Amazon&lt;/a&gt; in both Kindle and paperback format.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>iBeacon Demo at Gartner AADI</title>
      <link>//2013/12/12/ibeacon-demo-at-gartner-aadi/</link>
      <pubDate>Thu, 12 Dec 2013 08:06:56 -0800</pubDate>
      <guid isPermaLink="true">//2013/12/12/ibeacon-demo-at-gartner-aadi/</guid>
      <author></author>
      <description>&lt;p&gt;Last week, I joined my colleagues from Neudesic at the Gartner AADI (Application Architecture Development &amp;amp; Integration) Summit in Las Vegas. One of the neat things that we were showing was a demo of iBeacon technology, in order to help locate and pinpoint individuals within indoor environments where GPS is not an option. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To achieve this, we placed a selection of iBeacons around the expo floor (for the iBeacons we used RedBear’s BLE Mini boards, flashed with their iBeacon firmware).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/ibeacon-demo-at-gartner-aadi/redbear_blemini.png&quot; alt=&quot;Red Bear BLE Mini&quot;&gt;&lt;/p&gt;
&lt;p&gt;Using Bluetooth LE (a.k.a. Bluetooth Smart), each beacon transmits a unique ID (made up of a major and minor value) on a particular “frequency” (known as a proximity UUID). iBeacon supported mobile applications are then able to “tune in” to this proximity UUID, and based on the power signal for each beacon, determine which area of the floor a user is located closest to.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/ibeacon-demo-at-gartner-aadi/gartneraadi_screenshot.png&quot; alt=&quot;Gartner AADI screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;Using this information we created a mobile app that reports on all of the beacons within range on the expo floor. As you can see in the above screenshot, we have 5 iBeacons in range, listed in order of proximity, with an estimated distance calculated by the power signal. As you can likely gather from the data, we were located in the Neudesic booth at the time this screenshot was taken, with the theater, and a selection of other booths in range.&lt;/p&gt;
&lt;p&gt;For the show, we developed two versions of the application - one for iOS and one for Android. Both are native mobile applications written using &lt;a href=&quot;http://xamarin.com&quot;&gt;Xamarin&lt;/a&gt;, using CLLocationManager for iOS, and Radius Network’s &lt;a href=&quot;https://github.com/RadiusNetworks/android-ibeacon-service&quot;&gt;binding&lt;/a&gt; for supporting iBeacon on Android. The Radius implementation is especially interesting in that the beacon detection runs as a background service, polling for new iBeacons and raising intents to the UI as necessary (even though Bluetooth LE is a lot more responsible with power vs. regular Bluetooth, we still need to be careful not to kill the battery when using this however).&lt;/p&gt;
&lt;p&gt;While this is neat to show just as a mobile application, we wanted to take it one step further and demonstrate how this could be applied in the real world with &lt;a href=&quot;http://www.neuronesb.com&quot;&gt;Neuron&lt;/a&gt;, an ESB product from Neudesic. For our expo demo, Neuron provided a backbone infrastructure to allow the mobile app to resolve a name for a beacon ID (think of his like DNS for iBeacons!) and also give a scalable way for users to “check in” to an iBeacon the same way that they would check in via Foursquare or Facebook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/ibeacon-demo-at-gartner-aadi/gartneraadi_neuron.png&quot; alt=&quot;Neuron process flow&quot;&gt;&lt;/p&gt;
&lt;p&gt;As shown above, we developed a process flow using Neuron to accept incoming messages from the mobile application, and then provided logic to determine whether the device was trying to acquire a name for a beacon, or whether the user had walked in to the area of a beacon and wanted to “check in”. The benefit for using Neuron in this situation vs. just propping up a single web service is that our application can now scale to hundreds of thousands of concurrent mobile clients without needing to make any major adjustments on the server-side.&lt;/p&gt;
&lt;p&gt;If you were able to stop by the booth at the Gartner summit, I hope you enjoyed the demo and the conversation. If you weren’t able to attend, but would like to know more about how Neudesic is working with various organizations on iBeacon technology and/or Neuron, feel free to drop me a line.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Building a WebRTC Client for Android</title>
      <link>//2013/08/06/building-a-webrtc-client-for-android/</link>
      <pubDate>Tue, 06  Aug 2013 10:43:16 -0700</pubDate>
      <guid isPermaLink="true">//2013/08/06/building-a-webrtc-client-for-android/</guid>
      <author></author>
      <description>&lt;p&gt;If you’ve been following any of the recent developments with WebRTC, you’ll know that the majority of samples and example code available today target the Web browser (typically Chrome or Firefox).  While this is useful to get up to speed, IMO one of the most powerful applications of WebRTC will be for mobile devices.  Despite this, getting WebRTC running on mobile can be somewhat challenging.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:  As a few readers have pointed out, the libjingle source has now been merged into the main WebRTC branch (&lt;a href=&quot;https://code.google.com/p/webrtc/source/browse/trunk/talk&quot;&gt;https://code.google.com/p/webrtc/source/browse/trunk/talk&lt;/a&gt;). As a result, some of the instructions here will need to be adjusted.  I’m going to leave the post as is, but bear this in mind if you are following each of the steps.  Thanks.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While Chrome Beta for Android supports WebRTC, any true mobile client will always need some kind of native application (in order to receive incoming calls in the background).  In this post, I’ll be showing how to walk through the minefield of compiling WebRTC for Android in order to build your own demo app that you can expand upon.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/building-a-webrtc-client-for-android/hangout.png&quot; alt=&quot;Demoing the RTC client&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configuring your Build Environment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to build Android WebRTC, you are going to need a machine running Linux.  For the purposes of this article, I would recommend some kind of virtual image (VMWare or VirtualBox) running Ubuntu Server 12.04.2 LTS.  When you build your VM image, ensure that you use the 64bit version of Ubuntu, and that you allocate a minimum of 2Gb RAM to the image (any less and you may well see the compiler running out of memory).&lt;/p&gt;
&lt;p&gt;After you get your Linux VM up, the first thing is to install the required build tools.  First, the git and subversion clients:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install git git-svn subversion
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, you’ll need the Chromium depot tools - these tools are required to build the WebRTC bits, much of which derives from various parts of the Chromium project.  To install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~
git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After the tools have been brought down, you’ll also need to add them to your path:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo export PATH=&amp;quot;$PATH&amp;quot;:`pwd`/depot_tools &amp;amp;gt;&amp;amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once this is done, log out and log back in to the server.  From the command line run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gclient
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If all is working, you should see a list of available client commands.  If you see “command not found”, edit the ~/.bashrc file and double check your path is set correctly.&lt;/p&gt;
&lt;p&gt;The final part of configuring your build environment involves installing some required libraries and compilers.  To perform this, use the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install g++ pkg-config gtk+-2.0 libnss3-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once this is complete your machine should be in a position to start pulling down the WebRTC code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Obtaining libjingle Source Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to build the Android WebRTC client, we are going to pull down and compile the “libjingle” project.  Libjingle is a set of components to interoperate with Google Talk, but also contains (at the time of writing) the most complete and functional Android client.&lt;/p&gt;
&lt;p&gt;To pull down the source, follow these instructions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~
mkdir libjingle
cd libjingle
gclient config http://libjingle.googlecode.com/svn/trunk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After you’ve run the config command you should notice a new file called .gclient in the ~/libjingle directory.  Edit this file (using VIM or nano) and append the following to the end of the file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;target_os=[&amp;#39;android&amp;#39;,&amp;#39;unix&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will instruct gclient to pull down the required third party libraries and other tools for an Android build of libjingle.&lt;/p&gt;
&lt;p&gt;With this file modified, run the following command from the ~/libjingle directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gclient sync --nohooks
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will start a large sync of the liblibjingle source code, which will likely take some time.  A great opportunity for a coffee or break at this point!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing the Oracle JDK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before we can compile libjingle, we’ll need to install the Oracle JDK.  Although the majority of the library is native (and uses the Android NDK) this is required to build the JAR and APK file at the end of the build.&lt;/p&gt;
&lt;p&gt;To install, go to the Oracle JDK downloads page (&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/a&gt;) and download the latest JDK 1.6.  Note that JDK 7 will not work and you will get errors later on.  For the purpose of this tutorial I have been using Java SE Development Kit 6u45.&lt;/p&gt;
&lt;p&gt;As you are running server, you may need to download the JDK on another machine (where you will need to accept the license agreement) and then copy the .bin file to your Linux server (using either curl, wget, or VMWare shared folders).&lt;/p&gt;
&lt;p&gt;Assuming the .bin file is in your home (~) directory, to install the JDK, perform the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /usr/lib/jvm &amp;amp;&amp;amp; sudo /bin/sh ~/jdk-6u45-linux-x64.bin -noregister
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will extract the JDK to the /usr/lib/jvm directory.  After this is complete, we need to set the defaults to use the Oracle VM as opposed to the OpenJDK VM (which is installed by default).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.6.0_45/bin/javac 50000
sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.6.0_45/bin/java 50000
sudo update-alternatives --config javac
sudo update-alternatives --config java
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, to overcome a small bug in the libjingle gwp compile scripts, we need to create a symbolic link:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /usr/lib
ln -s jdk1.6.0_45 java-6-sun
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After you’ve done this, run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you see “Java HotSpot build 1.6.0_45” instead of “OpenJDK”, the correct version of Java is install and you should be in good shape.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Preparing for Compilation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before we compile, there are a few things that are required.  Firstly, we need to install some 32 bit compatibility libraries so that aapt and other Android compilation tools will function correctly.  To install, run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install ia32-libs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, edit ~/libjingle/trunk/third_party/webrtc/build/common.gypi&lt;/p&gt;
&lt;p&gt;Navigate to the line that contains:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enable_tracing==0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and replace with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enable_tracing==1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will prevent the Android client from crashing (when it realizes it doesn’t have a default trace file) and will make debugging the Android application a whole lot easier!&lt;/p&gt;
&lt;p&gt;Finally, perform the following commands to complete preparation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~/libjingle/trunk
./build/install-build-deps-android.sh
. ./build/android/envsetup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will correctly setup the android dependencies.  Note the leading period on the envsetup script - this is very important as we need the variables to be set for the rest of the session.&lt;/p&gt;
&lt;p&gt;Assuming these commands ran without errors, now run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gclient runhooks
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command will generate the required ninja gwp compilation scripts.  After this, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android_gyp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You may get an error indicating that content.gyp could not be found - it is fine to ignore this for now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Compiling!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you’ve reached this stage, congratulations!  We can now try to compile!  To do this, run the following command from the ~/libjingle/trunk directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ninja -C out/Debug -j 10 AppRTCDemo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command is instructing the ninja compile tool to generate a debug version of the build, using a maximum of 10 concurrent build threads.&lt;/p&gt;
&lt;p&gt;Depending on your machine, compilation will likely take about 10-15 minutes (time for that other coffee!).  Assuming everything went well, you should see some output in the ~/libjingle/trunk/out/Debug folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AppRTCDemo-debug.apk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the main demo APK.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;libjingle_peerconnection.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the JAR for libjingle.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;libjingle_peerconnection_so.so
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the ARM-based native library.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Running the APK on your device&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To run the APK on your device, copy the file to a machine with ADB installed (and your device connected) and run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;adb -d install AppRTCDemo-debug.apk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If all goes well, you should see a new application called “AppRTC”.  To test the application, launch a new browser on your desktop (not on the phone!) and navigate to &lt;a href=&quot;http://apprtc.appspot.com&quot;&gt;http://apprtc.appspot.com&lt;/a&gt;.  Enable access to your camera and microphone and note the room number of the conference window.&lt;/p&gt;
&lt;p&gt;Now, launch the AppRTC application on your device and enter the room number as part of the URL (ensure that there are no spaces).  If all goes well you should have an established connection with video and audio between the browser and the mobile device!&lt;/p&gt;
&lt;p&gt;If you run into issues (and this is quite complex, so it’s usual) check ADB logcat for any errors and exceptions that are being produced by the AppRTC application.  Although functionally, this code is working, at the time of writing the TURN server being hosted on Google’s Compute Cloud is having some issues - so I had to dive into the code and configure the application to use an alternative - but that’s probably a good excuse for another post sometime in the future!&lt;/p&gt;
&lt;p&gt;Either way, I hope this was useful and good luck!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Designing a Web API for Mobile Apps</title>
      <link>//2013/07/05/designing-a-web-api-for-mobile-apps/</link>
      <pubDate>Fri, 05 Jul 2013 10:14:04 -0700</pubDate>
      <guid isPermaLink="true">//2013/07/05/designing-a-web-api-for-mobile-apps/</guid>
      <author></author>
      <description>&lt;p&gt;As you can imagine, over the past few years, we’ve seen a fair share of good and bad API design.  In this blog post, I wanted to share some of my observations, thoughts, and questions that I ask of a well designed Web API, especially one that will be called from a mobile app.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Are the basics being met?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, the basics.  Without question, every Web API should be stateless.  There should be no session state, cookies, or server-side values used to hold any state of any kind.  Adding state adds complexity, and limits the ability for the API to scale, which for a mobile application that could reach millions of users is something that we want to avoid.&lt;/p&gt;
&lt;p&gt;Also, endpoints of the API should be exposed through SSL by default.  SSL is easy to setup, performant, and should be enabled for any API that we either consume or create.  As you may have observed, using SSL as default seems to be a direction in which many other APIs are heading.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. How do we authenticate with the API?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Authentication is critical to a Web API, and (in my opinion) is one of the common pitfalls.  As a rule, user credentials should never be passed as part an API call.  Take the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts?username=simon&amp;amp;password=simon
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Doing this is bad for three reasons:&lt;/p&gt;
&lt;p&gt;Firstly, although the URL gets encapsulated as part of the HTTPS session, it is likely still visible in any logs on the Web server.  This often also applies to user credentials passed as HTTP headers.&lt;/p&gt;
&lt;p&gt;Secondly, it makes debugging with users and other developers awkward (because you often need to ask for their username and password).  This is especially bad if the credentials are corporate accounts used for other systems.&lt;/p&gt;
&lt;p&gt;Finally, and most importantly, these types of credentials typically have a long shelf life.  If the call is ever compromised, there’s a good chance that it can be replayed back to the service up until the password is changed, which could be many months (if ever at all).&lt;/p&gt;
&lt;p&gt;To overcome this, some APIs use an application key or some other token derived from a HMAC algorithm.  This may work for some scenarios, but unfortunately if the key is exposed, it can be difficult to revoke.  This is especially true if the key has been embedded in a mobile app running on thousands of devices.&lt;/p&gt;
&lt;p&gt;Fortunately, to overcome both of these issues, there is OAuth 2.0.  OAuth 2.0 works by having the user pass a set of credentials (typically a username and password) to an authentication service.  Assuming the credentials are valid, the user/application/consumer receives back an access token.  This access token is then passed as a HTTP Authorization Header to the Web API to verify the authenticity of the request.  Moreover, this access token has an expiry (I find an hour to be a good time frame) so that if someone were to get hold of the token, their usage of the API is limited to this timeframe.  (You can read up much more about OAuth 2.0 &lt;a href=&quot;http://oauth.net/2/&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;There’s no doubt that implementing OAuth 2.0 involves more work, including setting up an authentication API and handing the lifetime of the token, but the end result is an API that is more secure and will also reflect the security model used by many others (e.g. Facebook, Google) - which means that you can even use these third parties as identity providers if you so choose.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Is the API really using REST?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve seen many examples of people thinking that they have a REST API when really they don’t.  Correct use of REST is about nouns, not verbs.  Let’s take this URL for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /GetAccountBalance?account_id=1234
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Although the above URL is accessed over HTTP, it’s really not a REST API.&lt;/p&gt;
&lt;p&gt;Using REST to it’s true intention means combining HTTP VERBS together with nouns or entities in the URL that represent the data you are exposing.  Instead of the previous URL, a correct REST syntax would be the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts/1234
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To create a new account we would use a HTTP PUT (together with a payload with the new account information)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PUT /accounts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To delete an account, we would use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DELETE /accounts/1234
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This noun-based approach can also work with hierarchical data.  For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts/1234/transactions/50
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Will return the a transaction (with id of 50) for Account 1234.&lt;/p&gt;
&lt;p&gt;Overall, a good understanding of REST, together with a focus on exposing nouns instead of functional methods will go a long way to create a more more usable and accepted API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. How should we consume this API?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you are dealing with an API that exposes a lot of entities, in addition to exposing generic REST endpoints, there are typically six things also worth considering:  Sorting, Searching, Filtering, Pagination, Helpers, and Partial Responses.&lt;/p&gt;
&lt;p&gt;Sorting.  Should the API return a sorted list of data to the consumer/application?  If so, a sort parameter on the noun can be useful:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts?sort=id
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;GET /accounts?sort=-id
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As shown above, a leading hyphen to indicate ascending or descending sort order can be a great timesaver (and often negates another query string parameter for sort order).&lt;/p&gt;
&lt;p&gt;Searching.  Similar to sorting, providing a way for consumers to search entities can be useful.  The use of the “q” parameter for search is somewhat standard:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /api/accounts?q=acme
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Filtering.  Another useful pivot for any REST based API is the ability to filter on a particular noun.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts?filter=balance%3E500
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(You can choose to use the URL encoded character for &amp;gt; as shown above, or I’ve seen many other APIs use gt, lt query parameters).&lt;/p&gt;
&lt;p&gt;Pagination.  A type of filtering, especially useful for large datasets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts?limit=50&amp;amp;offset=25
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This above call will get the next 50 accounts, starting at the 25th entry.&lt;/p&gt;
&lt;p&gt;Helpers.  With many APIs there are a number of common requests.  Maybe it’s the list of top ten customers, or the best sales people of the month. Putting these common requests as “helpers” into the API can be very useful for consumers, and can also help reduce the “chattiness” of the API by reducing the number of repeat requests.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts/top-ten
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Partial responses.  Finally, many consumers of the API (especially mobile applications) will want only a summary set of data.  This can be useful to build a list of items (in a master/detail view), without having to send the entire details for each item.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts?fields=id,name,balance
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Of course all of the above parameters can be combined as required.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts?fields=id,name&amp;amp;sort=id&amp;amp;limit=100&amp;amp;offset=50
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;5. What will the API return?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For the majority of APIs, especially those that will be consumed from a mobile application over a potentially slow connection, returning JSON is always good practice.  Compared to XML, data returned in JSON format will likely be more lightweight, and will require less parsing and processor overhead on the device.&lt;/p&gt;
&lt;p&gt;With that said, there are cases where other formats might be required - for example, a legacy system that is already expecting data in XML.  In which case, you might want to consider allowing the consumer to specify what type of data to return either through the HTTP Accept header or through a URL action (useful if you anticipate doing a lot of debugging).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts?format=xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There has also been a lot of talk recently about HATEOAS (Hypermedia As The Engine Of Application State), a term coined by Roy Fielding.  While there are many articles and presentations that explain Roy’s initial intentions, for the purpose of this blog post (and my own sanity), HATEOAS in a Web API referring to the use of links that instruct the consumer where to go for related information.&lt;/p&gt;
&lt;p&gt;For example, let’s imagine we made the following API call:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts/1234
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We might receive the following response:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ &amp;quot;account_id&amp;quot; : &amp;quot;1234&amp;quot;, &amp;quot;balance&amp;quot; : &amp;quot;100.90&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With a “HATEOAS-compliant” Web API, we may also receive embedded links.  For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{ &amp;quot;account_id&amp;quot; : &amp;quot;1234&amp;quot;, &amp;quot;balance&amp;quot; : &amp;quot;100.90&amp;quot;,
  { &amp;quot;_links&amp;quot; :
    { &amp;quot;transactions&amp;quot; : { &amp;quot;href&amp;quot; : &amp;quot;/accounts/1234/transactions&amp;quot; } }
  } 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see above, the API returns the data for the account, but also returns a link to the API call that will return all of the transactions for that account.  Think of these links as helping the consumer navigate to other related API calls.  (Incidentally there are a number of JSON formats for doing this, although I would recommend &lt;a href=&quot;http://stateless.co/hal_specification.html&quot;&gt;JSON HAL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Are the methods of the API consistent? &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While it’s difficult to recommend what you should name your methods and other parts of your API, the key to success is often consistency.  For example, if you have the endpoints for your accounts here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For your invoices, it would be silly to have them here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /order_entry/ledger/invoices_full
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In an ideal world (and even one without HATEOAS!), a user should be able to guess what the API should be based on previous usage.  Keeping the paths and names consistent are key to making this happen.&lt;/p&gt;
&lt;p&gt;Related to this, choosing the right case for APIs can be very important.  Having these two apis:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;GET /Invoices
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will likely lead to issues because of the case mismatch on the entity name.  My recommendation is to use lowercase throughout (then there is no ambiguity) and to use snake case to conjoin words.  For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /customer_details
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spinal case (using hyphens) is also acceptable, but if you are doing a lot of descending sorting, you may want to be careful.&lt;/p&gt;
&lt;p&gt;Finally, in terms of consistency, it’s always nice to be consistent with pluralization:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts/1234/invoice
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Assuming there are more than one invoice per account, this could also run people into trouble.  I would recommend deferring everything to plural to ensure consistency.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /accounts/1234/invoices
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;7. How is the API versioned?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Versioning is important, especially if there are breaking changes in production environments.  There are a couple of ways to achieve this:&lt;/p&gt;
&lt;p&gt;For large volume APIs where version consistency is critical, I would recommend placing the version information as part of the API call.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /v1.0.0/accounts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Versioning by using the URL makes it very explicit as to the version that the consumer is using.&lt;/p&gt;
&lt;p&gt;For less critical systems, or for APIs where breaking changes are going to be rare, I would recommend that consumers pass an optional version number as part of the HTTP header.  If the version number is passed as part of the post, the consumer gets a specific versioned response, otherwise they’ll be receiving the latest version.&lt;/p&gt;
&lt;p&gt;In addition to version numbers, I always like to see specific environments affiliated with the URL.  This is most easily done as part of the host subdomain, as it will likely correspond with the physical or virtual machine that the API is hosted from:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET https://dev.example.org/accounts
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;GET https://uat.example.org/accounts
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;GET https://prod.example.org/accounts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above makes it very clear whether I’m hitting the development, UAT, or production version of the APIs when I make my calls.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. How is the API documented?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you have a well designed API, you do not need to spend hours of time documenting the API in a Word document.  If anything you are going to end up with a Word document that will become quickly out of date.  In terms of documentation, there are two things that I find invaluable:&lt;/p&gt;
&lt;p&gt;Firstly, mandatory and optional methods and parameters should be documented.  It’s important that consumers understand what they can and cannot pass to the API.  What’s nice is that this documentation can typically be auto generated from the method signatures or comment blocks (which will keep your documentation in sync with your code).&lt;/p&gt;
&lt;p&gt;Secondly, sample code to show how to call the API.  A few sample calls for each method can be a life saver and much more valuable than reams of documents.  In these samples, show how the request should be formatted and what the response looks like.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9. What does the API return when things go wrong?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Returning useful error messages to consumers of your API is really important.  You should think about two types of error messages - ones that can be expressed with HTTP result codes, and ones that cannot.&lt;/p&gt;
&lt;p&gt;For the ones that can be expressed through a result code, simply return the result code with an optional body of information (in JSON format).  For example, if the access token has expired, return a 401 HTTP error code, and maybe some JSON payload to help debugging.  Also, if any part of the system is down (e.g. the database connection can’t be established), I would recommend returning a 500 for clarity.  With any HTTP result code, remember to pass the right one.  A good rule of thumb is that result codes in the 400’s typically indicate an error with the client, whereas codes in the 500’s means that something has gone wrong on the server.&lt;/p&gt;
&lt;p&gt;For errors that can’t be expressed through a HTTP result code, you should be returning a JSON payload that contains a minimum of two pieces of data - a unique error code for the issue, and a message aimed for the consumer/developer of the application to help them debug.  For example, if the consumer tried to create a new account without including all of the mandatory fields, this would be a useful error to return:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ &amp;quot;error&amp;quot; : 16, &amp;quot;debug&amp;quot; : &amp;quot;The mandatory field for balance was missing in the request&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some recommend returning a user message also, which can be useful.  Others use the error code to create their own message to pass to the user.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10. Finally, what else should we be thinking about for using the API in production?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are many considerations for using APIs in production - here are just a few:&lt;/p&gt;
&lt;p&gt;How are you going to make money from your API?  Are you thinking about a transaction cost per call, freemium, capped model, or something else?  Many of these systems are going to require some kind of API metering - which isn’t necessarily hard, but is definitely something else to consider.&lt;/p&gt;
&lt;p&gt;Are you going to rate limit your API?  How are you going to prevent a rogue customer, application, or process, who wishes to call your API hundreds of thousands of times?  Fortunately, there are answers to this - including RFC6585 which specifically deals with rate limiting - but again, something that you should be considering.&lt;/p&gt;
&lt;p&gt;Should your API provide cached results? Is this something that can improve the performance for your consumers, and also prevent unnecessary calls to back end databases and other systems?&lt;/p&gt;
&lt;p&gt;How is your API going to work over a low bandwidth connection?  Your API might work great on your FIOS line here in the US, but do consumers get the same experience when calling the API from a J2ME application from a cell phone in the middle of Africa?  There are many ways to simulate throttled connections and this should be something that is definitely worth testing for.&lt;/p&gt;
&lt;p&gt;Finally, and arguably most importantly, how can you get everything to go through your API?  Instead of thinking of an API as a companion to your existing Web-based applications, what would it take to push everything through this API - treating the API as a single source of truth?  It might sound scary, and undoubtedly it’s additional work to have everything using the API - but a single API that every application uses has the potential to offer a lot of re-use and sharing as you develop your API over time.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Persistent Logging in Android</title>
      <link>//2013/07/03/persistent-logging-in-android/</link>
      <pubDate>Wed, 03 Jul 2013 07:39:03 -0700</pubDate>
      <guid isPermaLink="true">//2013/07/03/persistent-logging-in-android/</guid>
      <author></author>
      <description>&lt;p&gt;No code is perfect, but the nasty types of bugs are the ones that happen randomly and infrequently.  On a couple of recent Android projects we’ve been experiencing such bugs, and as you can guess they can be difficult to track them down.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;While Android’s logcat can help, using the tool often means that you need the device connected through ADB and a USB cable in order to track the events.  While this is useful in development, this doesn’t work so well when debugging applications that are running on devices in the field.&lt;/p&gt;
&lt;p&gt;Rather than setting up your own logging application or service, it’s possible to setup logcat to persistently log to a file on the device or SD card.  To do this, simply open an ADB Shell and run logcat as a background process with the -f option:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;adb shell
# logcat -f /mnt/sdcard/extsd/logcat.txt &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see in the above statement, this will create a new logcat process to persistently log every event to a file called logcat.txt on the SD card.  To kill logcat, simply find the PID through the ps tool, and kill the process.&lt;/p&gt;
&lt;p&gt;In case you are worried about the size of the log files, logcat also has the ability to do log recycling:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;adb shell
# logcat -r 1024 -n 10 -f /mnt/sdcard/extsd/logcat.txt &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command will create up to 10 logcat.txt files on the SD card (named logcat.txt.1, logcat.txt.2, logcat.txt.3, etc.) up to 1Mb in size.  Once the end of the 10th file is reached, it will overwrite the first.&lt;/p&gt;
&lt;p&gt;Finally, this is all great - but if the user reboots the device, the logcat process will be terminated.  To overcome this, simply edit the /init.rc file and add the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service logcat -r 1024 -n 10 -f /mnt/sdcard/extsd/logcat.txt
    oneshot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hope this helps, and happy logging!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Transferring Data via Bluetooth on Android (android-btxfr)</title>
      <link>//2013/04/19/transferring-data-via-bluetooth-on-android-android-btxfr/</link>
      <pubDate>Fri, 19 Apr 2013 15:51:18 -0700</pubDate>
      <guid isPermaLink="true">//2013/04/19/transferring-data-via-bluetooth-on-android-android-btxfr/</guid>
      <author></author>
      <description>&lt;p&gt;Recently, I’ve been working on some code to transfer images and other data between Android devices using Bluetooth.  While I could have used the Basic Imaging Profile (BIP) of the Bluetooth 4.0 specification, this particular application has specific requirements that would have been difficult to implement using BIP.  To overcome this, I ended up building an application that instead relies on the Serial Port Profile (SPP), exchanging data using the RFCOMM protocol.  &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The SPP implementation on Android is nice, but only offers the fundamentals of an InputStream and OutputStream.  While this provides the basics of sending and receiving bytes, it doesn’t handle data integrity, progress updates, threading, or any of the other requirements often needed when sending data between two devices.&lt;/p&gt;
&lt;p&gt;The result from my recent work is an Android library called &lt;a href=&quot;http://github.com/simonguest/android-btxfr&quot;&gt;android-btxfr&lt;/a&gt;, which I’m happy to share through my Github repository.  android-btxfr is lightweight library designed to send and receive any type of data between Android (API 15 and higher).  It can be used to exchange text, files, photos, videos, sounds, and literally any other type of binary data.  The library supports anything that can be put into a byte stream and includes digest checking to ensure data integrity.&lt;/p&gt;
&lt;p&gt;The library exposes two thread types (ClientThread and ServerThread) depending on whether you are sending or receiving data.&lt;/p&gt;
&lt;p&gt;Receiving data is easy. Simply run the server thread, passing the paired bluetooth device and handler. The handler will be then called with the following messages:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DATA_PROGRESS_UPDATE&lt;/strong&gt; - Data is being received by the other device. The message contains the progress of the data being received.
&lt;strong&gt;DATA_RECEIVED&lt;/strong&gt; - Data has been fully received from the other device. The message will contain the actual payload (a byte stream of the image, video, etc.)&lt;/p&gt;
&lt;p&gt;There are other message types to handle failure conditions.&lt;/p&gt;
&lt;p&gt;The client thread works in a similar fashion. To send data, invoke the client thread, passing the paired bluetooth device and handler. The handler will be called with the following messages:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;READY_FOR_DATA&lt;/strong&gt; - Indicates that the connection has been established, and data can be sent.
&lt;strong&gt;SENDING_DATA&lt;/strong&gt; - Indicates that data is being sent to the other device.
&lt;strong&gt;DATA_SENT_OK&lt;/strong&gt; - Indicates that the recipient received the payload.&lt;/p&gt;
&lt;p&gt;Again, there are other message types to handle failures.&lt;/p&gt;
&lt;p&gt;To show all of this in action, I’ve put together a sample application, which can be found &lt;a href=&quot;http://github.com/simonguest/btphototransfer-sample&quot;&gt;here&lt;/a&gt;.  This app uses the android-btxfr library to send captured photos between devices. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/transferring-data-via-bluetooth-on-android-android-btxfr/sending.png&quot; alt=&quot;Sending a Photo&quot;&gt;
&lt;img src=&quot;/articles/transferring-data-via-bluetooth-on-android-android-btxfr/receiving.png&quot; alt=&quot;Receiving a Photo&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Enabling x86 Android Emulation</title>
      <link>//2013/04/16/enabling-x86-android-emulation/</link>
      <pubDate>Tue, 16 Apr 2013 13:28:03 -0700</pubDate>
      <guid isPermaLink="true">//2013/04/16/enabling-x86-android-emulation/</guid>
      <author></author>
      <description>&lt;p&gt;If you’ve undertaken any Android development, you’ll have likely found that the Android emulator can be painfully slow – to the point where the majority of developers I know use a physical device to do any development at all.  The primary reason behind this is that the default emulator is emulating an ARM based chipset on x86 hardware, and the translation between these two architectures is of course costly.  What many of these developers may not realize (and I didn’t until very recently) is that Intel have released a x86 Android emulator.  The x86 emulator has a few caveats (and of course cannot run any ARM-only libraries, such as the Google Play APIs), but overall can be used to speed up the performance of testing apps in the emulator by leaps and bounds.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is how to get it working:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the Android SDK Manager, ensure you have API Level 15 or higher installed.  Under the API of your choice, install the Intel x86 Atom System Image:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/articles/enabling-x86-android-emulation/sdkmanager.png&quot; alt=&quot;SDK Manager&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Under the Extras folder, install the Intel x86 Emulator Accelerator (HAXM) module:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/articles/enabling-x86-android-emulation/haxm.png&quot; alt=&quot;HAXM&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After you add the HAXM support through the SDK manager, you still need to install the HAXM package.  To do this, navigate to the Extras/Intel/Hardware_Accelerated_Execution_Manager folder under your installed Android SDK path.  Run the .dmg in this folder to install the support.  As part of the installation, you’ll be asked how much RAM to allocate/partition.  On my 16Gb MBP, I have chosen a 2Gb allocation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is &lt;strong&gt;really important&lt;/strong&gt; (for Mac OS X Mountain Lion users).  Go to &lt;a href=&quot;http://software.intel.com/en-us/articles/intel-hardware-accelerated-execution-manager&quot;&gt;this knowledge library page&lt;/a&gt; on Intel’s HAXM site and install the 1.0.4 hotfix.  If you do not install this hotfix, you will likely get a kernel panic when you try to start the AVD.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new AVD, or edit an existing AVD.  Ensure that the CPU/ABI is set to Intel Atom (x86).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/articles/enabling-x86-android-emulation/avd.png&quot; alt=&quot;AVD&quot;&gt;
You can also increase the RAM up to the limit that you set during the HAXM installation.  Also, you should ensure that the “Use Host GPU” check box is enabled as this will allow the emulator to use OpenGL ES on the host for increased performance.&lt;/p&gt;
&lt;p&gt;With that you should be set!  If you are editing an existing AVD, I recommend checking the “Wipe user data” checkbox before starting the image.  (Otherwise you might find that the emulator will hang during start up).  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/enabling-x86-android-emulation/launchoptions.png&quot; alt=&quot;Launch Options&quot;&gt;&lt;/p&gt;
&lt;p&gt;If everything is working OK, you should receive a message that HAXM has been enabled, and your AVD should boot in several seconds (as opposed to several minutes) and be lightning quick to use!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>jQuery Mobile and AngularJS Working Together</title>
      <link>//2013/04/08/jquery-mobile-and-angularjs-working-together/</link>
      <pubDate>Mon, 08 Apr 2013 12:56:58 -0700</pubDate>
      <guid isPermaLink="true">//2013/04/08/jquery-mobile-and-angularjs-working-together/</guid>
      <author></author>
      <description>&lt;p&gt;Both jQuery Mobile (jQM) and AngularJS are awesome at what they do, but getting them to play nicely together can be tricky.  As you may have discovered, both want to manipulate the URL/routes and DOM such that it’s very easily to get them in conflict.  Having been through this recently, I wanted to share some recommendations to get them working together.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Load jQM libs before AngularJS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Because both frameworks heavily manipulate the DOM, it’s important to get the load order right.  I found that loading AngularJS first led to some interesting (and annoying!) UI functionality.  The correct order should be jQuery first, followed by jQM, and then AngularJS:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://code.jquery.com/jquery-1.8.2.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://code.jquery.com/mobile/1.3.0/jquery.mobile-1.3.0.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular-resource.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Let jQM handle the URL routing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m likely to get flamed for this by MV* purists, but I recommend letting jQM handle all of the URL routing - and not using AngularJS for any routing.  Firstly, I spent a lot of time trying it the other way (disabling routing for jQM, and configuring various routes, templates, partial files, etc.).  Even when it did work, it was just a mess - it looked like someone had taken a shotgun to my jQM app and blown it into several pieces.  Secondly, I would argue that URL routing really shouldn’t be a primary consideration for a mobile Web app.  The app is more likely launched by an icon on the home screen vs. a search or link with any type of query string.  Even if it does, a simple check for a null scope is all that’s required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create a single Angular controller for a group of jQM pages&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Conforming to #2 means that you can create a single controller that spans a number of individual jQM pages.  This usage results in very elegant single HTML page together with a single controller - yet has the advantage of offering multiple pages to the user.&lt;/p&gt;
&lt;p&gt;To demonstrate this in more detail, and because you can’t have enough Todo list apps, I’ve put together a &lt;a href=&quot;http://github.com/simonguest/jqm-angular-sample&quot;&gt;sample&lt;/a&gt; using jQM, AngularJS, speaking to a service using Node, Mongoose, and MongoDB.  (To run, you’ll need a local Mongo DB called “todo” with a collection called “tasks”).  It definitely shows the power of both frameworks running together.  In just 75 lines of HTML and 29 lines of JavaScript for the controller, I have a mobile app with full CRUD support.  Hope you find it useful.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/jquery-mobile-and-angularjs-working-together/list.png&quot; alt=&quot;List&quot;&gt;
&lt;img src=&quot;/articles/jquery-mobile-and-angularjs-working-together/detail.png&quot; alt=&quot;Details&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>On-Demand VPN using OpenVPN for iOS</title>
      <link>//2013/03/22/on-demand-vpn-using-openvpn-for-ios/</link>
      <pubDate>Fri, 22 Mar 2013 12:03:30 -0700</pubDate>
      <guid isPermaLink="true">//2013/03/22/on-demand-vpn-using-openvpn-for-ios/</guid>
      <author></author>
      <description>&lt;p&gt;Many large organizations have existing VPNs in place, and the rise in development of enterprise mobile applications often requires that apps running outside the firewall need to “VPN in” before they are allowed to access any corporate resources.&lt;/p&gt;
&lt;p&gt;While enabling a VPN is fairly easy on most mobile devices, I’ve found that many IT organizations would like to automate this such that the device automatically connects to the VPN when the Enterprise App or an internal Website is launched. Having gone through this with a couple of customers, I’ve put this post together to highlight how this can be done.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Which VPN types support On Demand for iOS?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;iOS 4.2 introduced features designed for the enterprise. These features included several VPN clients (L2TP, PPTP, Cisco IPSEC), many of which can be configured to automatically initiate the connection based upon DNS requests for certain domains.&lt;/p&gt;
&lt;p&gt;While this on demand feature has been around for a while, it does have a couple of caveats. Firstly, it’s only available for SSL based VPNs. An SSL-based VPN is a connection that relies on a client/server side certificate for authentication. Having an SSL-based VPN means that the connection can be established without asking the user for credentials (e.g. a password or RSA token). Because an on-demand VPN could be connecting and disconnecting every few minutes, this makes sense as prompting the user could cause a jarring user experience. Secondly, the on demand VPN can only be setup using the iPhone Configuration utility. While you can create a VPN connection on iOS devices (under general/settings), it’s not possible to create an SSL-based VPN or specify any of the on demand domains.&lt;/p&gt;
&lt;p&gt;With this in mind, I’ll be showing how to establish an On Demand VPN using OpenVPN and the OpenVPN client for iOS that was released earlier this year.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Server-Side Setup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first step is of course to setup an OpenVPN server. If you don’t have access to one already, there are plenty of guides to help you set one up. If you don’t have access to a spare machine on the network, you can also use a Linux VM instance hosted on EC2, Azure, or any other hosting provider. This &lt;a href=&quot;http://holgr.com/blog/2009/06/setting-up-openvpn-on-amazons-ec2/&quot;&gt;article&lt;/a&gt; is a pretty good guide for setting this up on EC2 and the instructions should be able to be tailored to other hosting environments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Generating Certficates and Keys&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once you have your OpenVPN server running, you’ll need to either import or generate certificates and keys required to establish the connection. If you don’t have access to certificates already, you can find some great documentation &lt;a href=&quot;http://openvpn.net/index.php/open-source/documentation/howto.html&quot;&gt;here&lt;/a&gt; on how to create your own using the EasyRSA project on Github. (Scroll down and look for instructions on using easy-rsa)&lt;/p&gt;
&lt;p&gt;These are the certificates you’ll need to generate using EasyRSA:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ca.crt &lt;/strong&gt;(CA certificate required for both server and client)
&lt;strong&gt;dh2048pem&lt;/strong&gt; (A 2048bit Diffie Hellman key that is required on the server)
&lt;strong&gt;server.crt&lt;/strong&gt; (The server-side certificate)
&lt;strong&gt;server.key&lt;/strong&gt; (The key for the server-side certificate)
&lt;strong&gt;client1.crt&lt;/strong&gt; (The client-side certificate)
&lt;strong&gt;client1.key&lt;/strong&gt; (The key for the client-side certificate)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configuring OpenVPN &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Place the certificates in a folder called keys (under /etc/openvpn/keys) and modify your /etc/openvpn.conf file to look similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tls-server
port 443
proto tcp-server
dev tun
ifconfig 192.168.2.1 192.168.2.2
keepalive 10 120
comp-lzo
persist-key
persist-tun
verb 3
push &amp;quot;ifconfig 192.168.2.2 192.168.2.1&amp;quot;
push &amp;quot;redirect-gateway&amp;quot;
dh keys/dh2048.pem
ca keys/ca.crt
cert keys/server.crt
key keys/server.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This should be fairly straightforward to understand from the documentation, especially if you’ve used OpenVPN before. As you can see, we are creating a peer to peer connection using two private IP addresses (192.168.2.1 and 192.168.2.2). Don’t worry if these don’t match your internal network on the OpenVPN box - they don’t need to in order to get this up and running.&lt;/p&gt;
&lt;p&gt;For the purposes of this article, I have the VPN running on a tcp:443 connect, but feel free to adjust the protocol and port to match your own environment (assuming that you have the necessary ports open on your Firewall).&lt;/p&gt;
&lt;p&gt;Once you have the server configured, you can start OpenVPN:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openvpn --config /etc/openvpn/openvpn.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Assuming that the server starts OK, you can move to the next step.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing and Configuring the Client&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The OpenVPN client can be found on the AppStore. At the time of writing it’s version 1.0 build 47, which has a few bugs here and here, but still seems to work well.&lt;/p&gt;
&lt;p&gt;After you have this installed, go ahead and install the iPhone Configuration Utility on your Mac. This can be found on the Enterprise iPhone Support page (&lt;a href=&quot;http://apple.com/support/iphone/enterprise&quot;&gt;http://apple.com/support/iphone/enterprise&lt;/a&gt;). Don’t worry - although it’s called the iPhone Configuration Utility, this will also work for setting up a VPN on an iPad device also.&lt;/p&gt;
&lt;p&gt;After launching the utility, create a new configuration profile. In the general tab, enter the mandatory fields for name and identifier. Then, click on the credentials tab. We need to import the client certificate and key that was generated earlier using EasyRSA.&lt;/p&gt;
&lt;p&gt;Unfortunately, the iPhone Configuration Utility (which we’ll call IPCU from now on) doesn’t support importing .CRT and .KEY files directly, so we’ll need to generate a PKCS#12 file for use here. To do this, in the Terminal locate your client certificate and key files, and run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl pkcs12 -export -in client1.crt -inkey client1.key -out client1.p12
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result of this should be a .p12 file, that you can now import into the credentials section of IPCU.&lt;/p&gt;
&lt;p&gt;Note:  When you generate the .p12 file, you will be asked for an export password for the file. Enter something, and use the same password in IPCU (there is a field just under the certificate picture). If you don’t enter a password, you will likely get a profile error when you try to deploy this to the device.&lt;/p&gt;
&lt;p&gt;With this done, now navigate to the VPN tab and create a new VPN connection. IPCU doesn’t support including an OpenVPN config file, so we’ll have to create the majority of the settings in this tab - this is where things get fun :-)&lt;/p&gt;
&lt;p&gt;Give the connection a name, and select “Custom SSL” for the connection type. For the identifier, use the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;net.openvpn.OpenVPN-Connect.vpnplugin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is telling the VPN client that a specific bundle ID (the OpenVPN app) should be used for this connection.&lt;/p&gt;
&lt;p&gt;Next, in the Server field, enter the DNS name or IP address for your OpenVPN server.&lt;/p&gt;
&lt;p&gt;The Custom Data contains keys and strings that replicate what would have normally gone into a config.ovpn file. These are the entries that you will need:&lt;/p&gt;
&lt;p&gt;ca - This is a tricky one to get right. We can’t point it to a ca.crt file, because there is no way of bundling a file using the IPCU tool. To overcome this, open the ca.crt file in TextEdit and replace all of the newline/carriage returns with n. What you should end up with is a single (long) line of text that starts with ——-BEGIN CERTIFICATE——- and has several lines delimitered by n ending with ——-END CERTIFICATE——-. Once you have this, paste this entire line into the value for the ca key.&lt;/p&gt;
&lt;p&gt;comp-lzo - enter the key, but you don’t have to give it a value.&lt;/p&gt;
&lt;p&gt;dev - set this to tun&lt;/p&gt;
&lt;p&gt;port - set to 443&lt;/p&gt;
&lt;p&gt;proto - set to tcp&lt;/p&gt;
&lt;p&gt;(Again if you are using something other than TCP port 443, feel free to change)&lt;/p&gt;
&lt;p&gt;remote - set to [your server name] 443&lt;/p&gt;
&lt;p&gt;(replace your server name with the DNS name or IP address of your OpenVPN server)&lt;/p&gt;
&lt;p&gt;verb - set to 3&lt;/p&gt;
&lt;p&gt;Here’s a quick screenshot of my profile:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/on-demand-vpn-using-openvpn-for-ios/profile.png&quot; alt=&quot;Profile&quot;&gt;&lt;/p&gt;
&lt;p&gt;That should wrap up the custom data piece.&lt;/p&gt;
&lt;p&gt;Under User Authentication, select Certificate - and then under Credential select the client certificate from the drop down.&lt;/p&gt;
&lt;p&gt;Finally, check the “Enable VPN On Demand” box, and in the below table enter the domain names or IP addresses for the hosts that VPN is required for. For this tutorial, I have a single entry for 192.168.2.1 with “Always Establish”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That’s it!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This configuration should be enough to get VPN On Demand working with OpenVPN on the iOS client. To test, deploy the configuration profile to the device. Assuming that this works, open a browser and browse to 192.168.2.1 - this should invoke the VPN connection and forward the requests to the OpenVPN server. If you have a test page running on the OpenVPN server then this should be displayed in the browser.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If it didn’t work…&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There’s a good chance that things won’t work first time, just due the complexity of the setup.  Here are some of the common tips/tricks that I found during the process.&lt;/p&gt;
&lt;p&gt;Firstly, the console window in IPCU will be your best friend. The most common error I saw was related to the CA certificate. If you get these, it likely means that your CA entry in IPCU is wrong. Go back and make sure you’ve correctly replaced the linebreaks with n’s and retest.&lt;/p&gt;
&lt;p&gt;There are a few “bugettes” in the iOS client. As of build 47 these include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The tcp-client param is not supported in the iOS client. Use tcp instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The client expects ifconfig information to be pushed to it (using the push lines in the server config). It doesn’t seem to be possible to configure ifconfig lines locally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The “redirect-gateway” seems to be required for the iOS client - whereas Tunnelblick connects without it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Workflow. Getting VPN On Demand working right off the bat can be hard, especially if multiple parts of the configuration are wrong. If you are new to OpenVPN, you might want to setup a VPN with a the following configurations (in terms of complexity just to get working):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenVPN w/ Secret Key - using Desktop machine (use Tunnelblick for the Mac)&lt;/li&gt;
&lt;li&gt;OpenVPN w/ Certificate - using Desktop machine&lt;/li&gt;
&lt;li&gt;OpenVPN for iOS w/ Certificate - using the actual OpenVPN for iOS Client (not IPCU)&lt;/li&gt;
&lt;li&gt;OpenVPN for iOS w/ Certificate - using IPCU &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Browser Refresh.  If it looks like everything is working (VPN established, etc.) but you still don’t get your Web page, try refreshing the browser/making a 2nd request.  I’m not sure whether this is something in the config, or a “feature” of the OpenVPN client for iOS - but I’ve found that refreshing often helps brings the page to life after the VPN connection has been established.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>QCamera</title>
      <link>//2013/02/07/qcamera/</link>
      <pubDate>Thu, 07 Feb 2013 21:12:42 -0800</pubDate>
      <guid isPermaLink="true">//2013/02/07/qcamera/</guid>
      <author></author>
      <description>&lt;p&gt;Doing mobile development on a Mac?  Need to show your mobile device using your USB camera during a presentation?&lt;/p&gt;
&lt;p&gt;Here’s a quick utility that I hacked together over the weekend to do just that.  Supports mirroring/reversed images (which is why PhotoBooth won’t work for this) and borderless mode to keep it in the foreground over an IDE or presentation.  Hope you find it useful!&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/qcamera/appstore.png&quot; alt=&quot;Available on the App Store Badge US UK 135x40&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Uploading Photos from Mobile Web Applications</title>
      <link>//2012/07/06/uploading-photos-from-mobile-web-applications/</link>
      <pubDate>Fri, 06 Jul 2012 13:26:44 -0700</pubDate>
      <guid isPermaLink="true">//2012/07/06/uploading-photos-from-mobile-web-applications/</guid>
      <author></author>
      <description>&lt;p&gt;Here at Neudesic, we’re fortunate to be involved in many exciting HTML5/Mobile Web applications for different organizations. For many of these projects, one of the common requests, especially for field-facing mobile applications, is the ability to upload a photo from within a web page in a mobile browser.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If you are not familiar with the space, you may think this should be default behaviour, but surprisingly uploading media is one of those areas that is still going through the standardization process. Eric Bidelman has a &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/getusermedia/intro/&quot;&gt;great overview&lt;/a&gt; of the three “rounds” of standardization that have taken place so far as part of the &lt;a href=&quot;http://www.w3.org/2009/dap/&quot;&gt;Device API working group&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What can you do today?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While Eric’s article gives a great overview of what’s likely to come, the purpose of this post is to explore what’s possible today, outlining the relative pros and cons of each approach.&lt;/p&gt;
&lt;p&gt;Firstly, let’s take a look at what’s supported out of the box:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you are using Android 3.x+ (i.e. either Android tablets running Honeycomb or later, and Android phones running ICS) - or users are running Chrome or Firefox Mobile for Android, the browser will support an input element that can invoke the camera:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;accept&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;image/*&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;capture&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;camera&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simply add this element to your web page, and together with some server-side processing for the upload, users can upload the image from their device.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/uploading-photos-from-mobile-web-applications/AndroidImageUpload.png&quot; alt=&quot;Android Image Upload&quot;&gt;&lt;/p&gt;
&lt;p&gt;As Eric mentions in his article, it does look like things are heading towards &lt;em&gt;getUserMedia()&lt;/em&gt; instead. Although this new API works with latest versions of the desktop version of Chrome, we haven’t found anything that works on mobile browsers as of yet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iPhone/iPad&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, the input element above does not work on Mobile Safari on iOS5 today - the experience for the user is just a disabled button. This is true for the recently released version of Chrome for iOS also (as it’s just a wrapper over UIWebView).&lt;/p&gt;
&lt;p&gt;Things are changing however.  At WWDC this year, Apple publicly announced support for photo and video uploads within Mobile Safari shipping with iOS 6. It’s difficult to say much more about the implementation here (as the developer/beta programs are under NDA), but if you have access to Apple’s developer program, it’s definitely worth checking out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apache Cordova (PhoneGap)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want to support earlier Android versions, and/or can’t wait for iOS 6, arguably the most popular choice is Apache Cordova (previously known as PhoneGap). Apache Cordova provides a native wrapper around HTML-based content, and supports several platforms today - including iOS and Android. The Cordova API supports media capture, and with a couple of lines of JavaScript, it’s possible to instantiate the camera or invoke the camera rolls within your Mobile Web application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/uploading-photos-from-mobile-web-applications/CameraRoll.png&quot; alt=&quot;Camera Roll on iOS&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Works with the most popular versions of mobile browsers, and as of now, Cordova provides a good user experience for the user. The user presses a “add photo” button in the HTML application, and the native wrapper invokes the camera control without the user needing to know whats going on. If using the camera roll, the API also supports the option of uploading multiple photos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Using Cordova does however change the deployment model for the application. No longer can you just visit a Web site to use your application - you now need to think about distributing your application - either via the AppStore for public-facing applications or through another channel for enterprise apps.&lt;/p&gt;
&lt;p&gt;In addition to the deployment, Cordova also introduces several options that need to be considered for actually transfering the image to the site. The default is to use Base64 encoding, which is good for small images, but we’ve experienced performance problems on large images from 5MP+ cameras. The Cordova API does support a File Transfer API, which works well except it doesn’t yet support authentication, so you’ll need to create an anonymous area to post your photos to. If you do need authentication, you’ll want to send the photo directly after capture, which will likely mean writing a custom Cordova plug in and using NSUrlConnection to send your photo to the server.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Companion Application&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An alternative approach to wrapping your HTML content with native code is to ship a “companion application” responsible for uploading the photo.&lt;/p&gt;
&lt;p&gt;Both iOS and Android support custom URL schemes, which means that applications can respond to different URL requests from the browser. For example, I can create a native application responsible for taking and uploading pictures, using a custom URL scheme called simonphoto:// which I can then pass various parameters - for example, the ID of a project that I’m uploading photos for. Once the user clicks on the simonphoto:// link within the mobile browser, the application launches and I can take and upload as many photos as I want.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; The biggest draw to this approach is that the HTML application doesn’t need to be wrapped with any native code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; While I don’t have to wrap my HTML, the user still needs to obtain the companion application, which will likely involve a trip to the AppStore or other link for download. In addition, even when the companion application is downloaded, the user experience isn’t quite as slick as the the PhoneGap approach. For example, in iOS there is no natural way of getting back to the Web app once the native application is ready to hand back control (unless you pass a return or app id in the parameters). Also, there is no way of checking whether the companion application is installed or not from the Web page.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Picup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://picupapp.com&quot;&gt;Picup&lt;/a&gt; is an example of a free companion app that works in a similar way as outlined above. It uses the fileupload:// URL scheme to invoke the Picup app, which much be installed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/uploading-photos-from-mobile-web-applications/Picup.png&quot; alt=&quot;Picup Application&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros: &lt;/strong&gt;As above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; As above. No version for Android (although I’m sure there are equivalent apps available).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Email&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally, a very simple approach, but one that I’ve seen a couple of people use is sending the photo via email. Your application has a “mailto” link which includes a subject (maybe the ID corresponding to the application) and body that reads “Please remember to attach your photo”. The user attaches the photo manually and it’s sent to a server-monitored email store for processing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros: &lt;/strong&gt;Nothing native here, and deployment model stays the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons: &lt;/strong&gt;Funky experience for the user. You’ll also need to setup a server side environment to handle the incoming emails, strip the attachments, and correlate with your application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A lengthy post, but hopefully it gives you an overview of how to do photo upload from mobile devices today. To summarize:&lt;/p&gt;
&lt;p&gt;If you are writing an application that won’t be released for a few months, and will primarily target Android ICS and iOS6, you should be able to use the input element outlined above to invoke the camera and upload a picture. If you do this, make sure you understand the transition to getUserMedia as the specifications mature.&lt;/p&gt;
&lt;p&gt;If you are writing an application that needs to target today’s platforms - namely Android 2.x and iOS5, you’ll either need to use Cordova to create a wrapper or a companion application (either hand crafted, or something like Picup). Choosing between Cordova and a companion application is a balance of user experience vs. deployment. A Cordova application will keep the user experience seamless, but you will be responsible for the deployment of the application as a result.&lt;/p&gt;
&lt;p&gt;If you don’t want to do any device development, and are just looking to provide a shortcut for users to send photos, you could consider the basic mailto: / email link approach.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Announcing Neudesic Slingshot!</title>
      <link>//2012/06/27/announcing-neudesic-slingshot/</link>
      <pubDate>Wed, 27 Jun 2012 08:06:58 -0700</pubDate>
      <guid isPermaLink="true">//2012/06/27/announcing-neudesic-slingshot/</guid>
      <author></author>
      <description>&lt;p&gt;Getting SharePoint working on a mobile device can be hard. The “out of the box” experience, even with SharePoint 2010, is very basic and doesn’t take advantage of the device. Solutions on the AppStore are a step in the right direction, but many don’t do anything over providing the ability to browse a SharePoint site. At Neudesic, we are hoping to change all this through a project we call &lt;a href=&quot;http://neudesic.github.com/slingshot&quot;&gt;Slingshot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Slingshot is an open source mobile client and library for SharePoint. Built upon the jQuery Mobile and Apache Cordova frameworks, Slingshot makes it ridiculously easy to expose tasks, announcements, documents, and virtually any other object directly from SharePoint to any mobile device.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/announcing-neudesic-slingshot/screens.jpg&quot; alt=&quot;Screenshots&quot;&gt;￼&lt;/p&gt;
&lt;p&gt;We demonstrated Slingshot for the first time in public at the SharePointFest in Denver this week, and the response has been tremendous. For those that didn’t make it to the event, I wanted to use this blog post to expand on what the framework can do.&lt;/p&gt;
&lt;p&gt;Slingshot is very lightweight, and can be deployed in one of two ways: The code can run on the SharePoint server, and users access it using their mobile browser. Alternatively the same code can run on the mobile device in a native application, with no changes required on the SharePoint server.&lt;/p&gt;
&lt;p&gt;Here’s a quick run through of what Slingshot supports today:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SharePoint Lists and Items&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Slingshot uses the ODATA support in SharePoint 2010 to expose virtually any list or item to the mobile device. The out of the box demo shows announcements, tasks, and organizational details, and it’s easy to extend to workflows and other lists. Each of these items can be exposed through a form with touch native controls.  For example, task items have a slider control to indicate percentage complete.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bi-Directional Updates&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sample app also demonstrates bi-directional updating. Update an item from SharePoint UI, and it automatically gets updated on the mobile device. Alternatively, update on the mobile device and the item is automatically updated in SharePoint. This update is seamless, so the user doesn’t have to hit “save” after making the change on the mobile device.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Document Library Support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of the core scenarios for using Slingshot is to browse document libraries, which Slingshot handles really well. Supported file types (such as PDFs) can also be opened directly from the mobile app.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integration with Photo Capture&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Browsing and opening files from a mobile device is useful, but Slingshot also supports uploading data from the device. The majority of phones now come with a camera. The sample application shows how to take a photo on the device and upload it to a document library or attach it to an item. We find this functionality well suited for field employees who need to interact with workflows that involve taking pictures and uploading them to SharePoint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Support for Offline Scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Because Slingshot works locally on the device it enables a number of offline scenarios. Currently the application has the ability to work offline, and we are working on synchronization of SharePoint lists and items to the device, which will provide a true offline experience if no connection is available.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Authentication works in one of two ways. If you are accessing Slingshot via a mobile browser, the browser will prompt for credentials (the same way as if you’d just navigated to any other SharePoint page). If you are running Slingshot locally on the device, we use a form-based mechanism that can be customized and extended as needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multi Platform Support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Because we’ve developed all of this using jQuery Mobile and Cordova (PhoneGap), it is supported on multiple platforms by default. Both these frameworks support up to six platforms today, including iOS, Android, Windows Phone 7, and Blackberry. We provide default templates for iPhone and Android, and creating new templates for other devices is as simple as creating new CSS files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Easy to Extend and Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Apart from the device integration, everything in Slingshot is based on HTML5 and JavaScript. For those coming from a web background, this makes it very simple to extend and update.&lt;/p&gt;
&lt;p&gt;Best of all, we’ve licensed Slingshot as an open source framework, under the MIT license. You can get all the bits for free, and we even have other developers that are signing up to contribute.&lt;/p&gt;
&lt;p&gt;Ready to see more? If you didn’t have an opportunity to stop by the booth at SharePointFest in Denver, check out the &lt;a href=&quot;http://neudesic.github.com/slingshot&quot;&gt;repo&lt;/a&gt; on GitHub – or drop me a line if you’d like more information. Neudesic is actively extending this framework for many other scenarios and customers, and we’d be happy to help you extend this for your own needs also.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>An Objective View of MEAPs</title>
      <link>//2012/04/24/an-objective-view-of-meaps/</link>
      <pubDate>Tue, 24 Apr 2012 13:45:01 -0700</pubDate>
      <guid isPermaLink="true">//2012/04/24/an-objective-view-of-meaps/</guid>
      <author></author>
      <description>&lt;p&gt;I recently had the opportunity to put together some research for a customer who has been interested in the MEAP (Mobile Enterprise Application Platform) space.  My premise is that the market has become flooded with MEAPs (Mobile Enterprise Application Platforms, as coined by Gartner), yet most of them are fundamentally taking organizations and developers down the wrong path when it comes to developing mobile applications.  The problem is that MEAPs demo really well in front of the CIO… “Wow!  You just hit F5, and your application is compiled and deployed to iOS, Android, Blackberry devices…  Where do I sign?” – yet the reality is very different.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Language Abstraction&lt;/strong&gt; – Many MEAPs have their own language that claim to be similar to Java or a flavor of JavaScript.  Even if it is the same language, there is always something new to learn.  Also, developers tend to shy away from learning any language that’s vendor specific (APEX on Force.com anyone? ;–)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Language Limitations&lt;/strong&gt; – When you create a language that abstracts other languages you always end up serving only the lowest common denominator.  Often there are ways of coding styles and nuances supported in the native language that the MEAP won’t expose because it’s not on other platforms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Platform Limitations&lt;/strong&gt; – Time has shown that platform abstraction doesn’t work (do a search on Wikipedia for cross platform RAD tools if you don’t believe me).  Also, platforms change quickly.  What happens if/when the next version of iOS is released?  You have to wait for your MEAP vendor to catchup before you can use any of the features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UI Limitations&lt;/strong&gt; – Following on from the previous point, many of the controls that MEAPs offer also follow the lowest common denominator rule.  For example, Cocoa Touch has a neat feature called a “Half Page Curl Transition”.  If you abstract your UI to a MEAP vendor, how is this supported on other platforms?  Either a) it’s not (so by default you can’t use it on iOS), b) you can only use it on iOS (which breaks the promise of a MEAP) or c) it’s implemented as a hack job on all platforms. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tooling&lt;/strong&gt; – MEAP tooling is often Web based, or bundled as an Eclipse add-on – but in both cases it often doesn’t fit in with the other tools that developers use today (e.g. ALM, refactoring, unit testing, etc.).  Also, many of the MEAP vendors seem to be aiming their toolsets towards business analysts.  When are we going to let this one go?  Business analysts have an important role to play in teams, but they shouldn’t be developing UI, and they shouldn’t be writing code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debugging&lt;/strong&gt; – Let’s say you create your application with a MEAP, and then it crashes 1 time in every 10 (i.e. one of those really nasty bugs to find).  What are you going to do?   a) Reach out to Apple?  I suspect they won’t help you.  b) Search the web for other people with the same issue?  Could be difficult to find.  c) Pay the MEAP vendor even more money to investigate your issue?  Ah, that’s the one…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data Abstraction&lt;/strong&gt; – Many MEAPs offer connectors to databases, XML files, SAP, etc.  Not only are these costly, but many are just pass-through connectors, so as a developer you don’t get any control over the connection.  Want to implement synchronization?  Want to change the formatting or query for better optimization?  Probably not going to be possible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficult to Extend&lt;/strong&gt; – Many MEAPs don’t extend very easily.  Found a new JavaScript library that you want to use in your application?  How about a native control that you’d like to display?  Could be tough.  Some MEAPs do offer bridging to native code – but in which case, why not just write the whole thing in native code to start with?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vendor Lock In&lt;/strong&gt; – The sum of all the above leads to quite the definition of vendor lock in.  Chances are by the time you deploy your first application you’ll be signed up with an expensive support and service agreement, with your developers working on code in a language that they’ll never be able to re-use, on a platform that won’t go anywhere.&lt;/p&gt;
&lt;p&gt;I’ve extended this into a presentation that you can find &lt;a href=&quot;http://slideshare.net/simonguest&quot;&gt;here&lt;/a&gt; – which cover the above points in more detail, plus outline some general alternative approaches to creating applications without the dependency on a MEAP framework.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Tips, Tricks, and Recommendations for HTML5/Mobile Web Development</title>
      <link>//2012/04/12/tips-tricks-and-recommendations-for-html5-mobile-web-development/</link>
      <pubDate>Thu, 12 Apr 2012 06:14:45 -0700</pubDate>
      <guid isPermaLink="true">//2012/04/12/tips-tricks-and-recommendations-for-html5-mobile-web-development/</guid>
      <author></author>
      <description>&lt;p&gt;Over the past few months I’ve been fortunate to have worked with several customers creating Mobile Web applications for different devices.  These have included an iPad based Mobile Web app for a healthcare provider, a cross-platform Mobile Web app for a commercial real estate broker, and an Android tablet solution to allow scientists to research experiment details from the comfort of their lab.&lt;/p&gt;
&lt;p&gt;From these projects, I’ve come up with a list of tips, tricks, and recommendations that I wanted to share if you are looking to develop your own Mobile Web applications.  Hope you find them useful…&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understand the differences between Mobile Web and hybrid applications&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It’s important to make an early decision on whether your application is going to be pure Mobile Web (the user accesses it through the browser on the device) or hybrid (the user launches an application with an embedded control to display web based content).  The decision to use the mobile browser or to have a dedicated hybrid application will likely be determined by the functionality the application requires.  For example, obtaining the GPS location from the device can be performed perfectly well inside the browser, but accessing the camera from a Web page needs a hybrid application to provide the functionality. &lt;/p&gt;
&lt;p&gt;In my experience there are three common features that drive developers towards a hybrid application:  1. Access to the camera.  2. Access to local contacts on the device.  3. Deployment to the AppStore/Marketplace.  The first two are to overcome limitations of what can and can’t be accessed through the mobile browser (and is something that Mozilla is trying to tackle through &lt;a href=&quot;https://wiki.mozilla.org/WebAPI&quot;&gt;WebAPI&lt;/a&gt;).  The latter one is probably the most important to understand however – as while a hybrid solution will enable the application to be published to the app stores, extreme care needs to be taken to ensure that the application will not be rejected.  This is most common with applications destined for Apple’s AppStore (if Apple view your application as a single container for web content with no apparent native functionality, they will more than likely reject it).&lt;/p&gt;
&lt;p&gt;If you do take the hybrid approach, you really have two options to build the application – you can either set out and build a native application, embed a WebView control and then hook different events to create your own bridge between the two.  This can be very useful if you only have a small piece of Web functionality that you need to embed in your application.  Alternatively, you can consider using a framework such as &lt;a href=&quot;http://phonegap.com/&quot;&gt;PhoneGap&lt;/a&gt; (now known as &lt;a href=&quot;http://incubator.apache.org/cordova/&quot;&gt;Apache Cordova&lt;/a&gt;).  Using Cordova is  not without it’s challenges (for example, with cross domain scripting and client side certificate authentication), but it can definitely give you a head start especially if the majority of your application is going to be based on mobile web content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Setup a robust development and testing environment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Setting up a robust development environment might be viewed as obvious for most of us, but tools for developing Mobile Web applications are still relatively immature, so it’s an important area to get right before you start your first app.  In the most basic setup, you are going to need three things to be successful:&lt;/p&gt;
&lt;p&gt;The first is a great IDE for HTML development.  You’ve probably got your favorite already, but a strong IDE with as much JavaScript code completion support as possible will be your friend.  Personally, I switch between &lt;a href=&quot;http://macromates.com/&quot;&gt;TextMate&lt;/a&gt;, &lt;a href=&quot;http://www.microsoft.com/visualstudio/en-us&quot;&gt;Visual Studio 2010&lt;/a&gt;, and &lt;a href=&quot;http://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt; depending on which platform I’m working with.  It’s also interested to see where Adobe are headed with their toolset.&lt;/p&gt;
&lt;p&gt;Secondly, you are going to need a browser capable of inspecting the DOM and doing JavaScript debugging.  Personally, I use Safari for doing this, but Chrome and/or IE9 will equally provide you the tools that you need.  The important thing here is not so much the choice of the browser, but the understanding of how to breakpoint JavaScript code and inspect elements both on and off the page. &lt;/p&gt;
&lt;p&gt;Finally, you’ll need some kind of device, or device emulator.  Switching the user agent on a desktop browser will only get you so far, and eventually you are going to need to test on something representative of the device that the user will be using.  If you are developing an application that will be primarily used on iOS devices, I would certainly recommend a Mac (as the iOS simulator is very robust).  If a Mac doesn’t float your boat as your development machine however you could consider a hosted solution such as &lt;a href=&quot;http://www.macincloud.com/&quot;&gt;MacinCloud&lt;/a&gt; or simply do all your debugging using an iPod touch.  There are a few PC based utilities that claim to emulate mobile safari/iOS, but I’ve had a poor experience with all of them.&lt;/p&gt;
&lt;p&gt;For Android, I tend to avoid the emulator whenever possible (it’s a resource hog) and instead have a selection of devices that I can use for debugging on the fly.  I’ve found that the key for Android testing is to have a selection of devices with preferably different resolutions and running different versions of the OS (e.g. a separate device running 2.1, 2.2, 2.3, and 4.0 should cover most of the current market, unless you have a need to go back to 1.6 for some reason).  If you don’t have access to physical handsets, you may want to consider one of the testing providers such as &lt;a href=&quot;http://www.perfectomobile.com/&quot;&gt;Perfecto Mobile&lt;/a&gt;.  They have a variety of devices that you can rent, covering many different platforms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use client side JavaScript instead of server side scripting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you’ve been developing Web applications for some time, especially enterprise facing applications, you’ll be used to having a lot of the presentation and application logic tied up in server side scripts, maybe running server-side ASP, ASP.NET, JSP, PHP, etc.  When developing Mobile Web applications however, things need to change.  While server-side scripting will of course still work for a mobile application (and might be very tempting as you start to write your first application), it quickly creates a tight coupling between your device and the server.  In the old days where you were accessing the server from a desktop browser on the same network, this wasn’t a problem – but once you move the experience to a mobile device with a potentially patchy network connection, the last thing you want to be doing is relying on the server side for generation of pages and views.  If your mobile web application needs to do a roundtrip to the server when you hit the “Next Page” button, you’re going to be heading for a world of hurt.&lt;/p&gt;
&lt;p&gt;The answer is to move as much (if not all) of the application logic to client-side JavaScript.  This might be a painful exercise as you translate the move from an MVC server side framework to handcrafting page navigation using client side JavaScript, but the pay off will be worth it.  If you have all of the application logic locally, together with pre-fetching as many of the pages into the DOM when your application first loads, you effectively disconnect yourself from the server side which makes performance much better and also moving to offline much easier.  Of course, you still want to communicate with the server side – who doesn’t? – but this should be done via a set of asynchronous REST/JSON calls to bring data into the application rather than relying on the server to generate HTML for your application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Design for running offline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Related to the previous point, you should also start thinking about how your application could run offline, even if you have no plans to do so.  This will put you on a good architectural path, and will also mean that your application will work if and when network connectivity is lost.  There are plenty of articles explaining how to enable offline access in HTML5 applications, so I won’t plan to cover here – other than to say you’ll be creating a cache manifest for your application, specifying the files to go into your cache, enabling the scripts for checking the cache when your application starts, and handling control logic accordingly (e.g. when you hit that submit button, you’ll want to know whether there is network connectivity before making the call to the server!).&lt;/p&gt;
&lt;p&gt;If there’s one piece of advice that I can offer here however (and we learned this the hard way) it is to design for offline first, but implement last.  Do all of the right things to support offline in your application, but don’t enable it until you are close to the end of your development cycle.  If you enable it too early, it can cause mayhem with the development team – as your developers could end up debugging against a version of the application that could be slightly older – or the cache doesn’t get refreshed in the way it should.  This doesn’t application to local storage – this is fine to access during development – I would just recommend not enabling the cache manifest until you go into UAT.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Select the right UI framework for your needs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Almost every other day there seems to be a new HTML UI framework released, and mobile frameworks are no exception.  At Neudesic we’ve had most experience and success using &lt;a href=&quot;/2012/04/12/tips-tricks-and-recommendations-for-html5-mobile-web-development/www.jquerymobile.com&quot;&gt;jQuery Mobile&lt;/a&gt;, but have equally done work using &lt;a href=&quot;http://www.sencha.com/&quot;&gt;Sencha&lt;/a&gt;, &lt;a href=&quot;http://dojotoolkit.org/features/mobile&quot;&gt;Dojo&lt;/a&gt; and others.  As all the frameworks offer slightly different combinations of controls, I’ve found one of the tricks for selecting a suitable framework is to first build out a list of the controls that you are likely to need.  For example, in one project we developed a set of paper prototypes (side note – I really dig &lt;a href=&quot;http://www.uistencils.com/&quot;&gt;UI Stencils&lt;/a&gt; for this) and realized that we would be creating a multi-tabbed application, with many lists on each page.  Knowing what controls we were likely to use ahead of time made selecting the framework easier, and also put into perspective what controls we would have to build from scratch.&lt;/p&gt;
&lt;p&gt;The good news is that most of the frameworks have demo pages/sites available, so that you can check them out beforehand without having to download anything.   This can be a great way of testing the controls across a different number of devices, as well as getting a feel for the performance.  My rough order of magnitude is that HTML based mobile UI will feel around 85% of a native control – it will look similar, react similar, but you just know that there’s this 10 – 15% gap that doesn’t quite feel native.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understand the caveats with implementing maps in Mobile Web applications&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Related to the last point, many applications have a need to display maps and pinpoints, and this will likely remain true for many mobile web applications that you might be creating.  Based on experience, there are a couple of caveats that need to be understood before you head down this path.&lt;/p&gt;
&lt;p&gt;Firstly, performance on Mobile Web map controls is not to par with native controls.  Using Google Maps in Safari on iOS seems sluggish when comparing it to using MapKit in a native iOS application.  I’m not sure what optimizations have been done in MapKit to give it the performance it has, but the difference is quite noticeable.  As a result, if your application has a fundamental need to do a lot of mapping (i.e. if this is it’s primary function) you may want to consider a hybrid approach where you navigate to native pages for the mapping as part of your application.&lt;/p&gt;
&lt;p&gt;Secondly, the web control for Google Maps (and this probably applies to other mapping controls) likes to “own” the page – which can put it into conflict with UI frameworks such as jQuery Mobile.  For example, when you change pages in jQuery Mobile, the DIV element of your current page is set to hidden, and the DIV element of the new page to block.  If your map control is embedded on a page that gets set to hidden this can cause Google maps to have a hard time.  We’ve experienced random behavior such as the map control not updating or repainting correctly when it is brought back into focus.  This can be overcome by an event on the page load to refresh the map canvas (example below), but it’s one of those bugs that takes a lot longer to find than it does to fix.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;$(‘#mappage’).live(‘pageshow’, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt; google.maps.event.trigger(map, ‘resize’); });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Think ahead for non-standard UI elements you are likely to need&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While frameworks such as jQuery Mobile will provide standard controls such as buttons, lists, labels, and radio boxes, your application will likely have a need for elements and controls that are non-standard.  These can include tables, grids, and image carousels to name a few.  Many of these can be created using custom controls, but before going down that path, I always try and ask myself two questions:&lt;/p&gt;
&lt;p&gt;Firstly, if the control does not exist, does that mean a better UI nuance is available for the device?  For example, there are few mobile web controls for displaying datagrids on mobile devices.  Rather than force-fitting a solution that might not work well on a 3.2” screen, think about what alternative solutions could be used instead.  For example, maybe a series of cascading list controls would actually provide for a better user experience over some custom hacked-together table control.  When in doubt, try to look at how other mobile applications have used controls to represent a similar data set.  &lt;/p&gt;
&lt;p&gt;Secondly, if the control does seem to fit, but it’s just not included in the standard UI framework that you’ve chosen, think about searching for a third party solution before re-creating something new.  This can apply to image carousels (&lt;a href=&quot;http://www.photoswipe.com/&quot;&gt;PhotoSwipe&lt;/a&gt; is one of my favorite controls for doing this) as well as charting (there are several really good JS based charting controls out there).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make your mobile web app look and feel like it belongs with native applications.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Why not go that extra step and have your mobile application look like it belongs with other native applications on the device?  A couple of small recommendations for this one:&lt;/p&gt;
&lt;p&gt;Firstly, never show the address bar in your mobile application.  Simply use a &lt;viewport…/&gt; tag to have your application run in full screen mode.  The user will still be able to get to the address bar, but it will be hidden from view by default.  (side note – jQuery Mobile now performs this automatically without the need to do “scroll to” events in JavaScript).&lt;/p&gt;
&lt;p&gt;Secondly, if you are targeting iOS devices, consider using Cubiq’s &lt;a href=&quot;http://cubiq.org/add-to-home-screen&quot;&gt;AddToHome&lt;/a&gt; JS library.  This is an excellent add on that will display instructions for the user to add the application to the iOS home screen, enabling the application to have it’s own icon and run completely full screen when launched.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don’t go creating your own username and password database&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Have users sign on to your application can be very useful for security of the application and for storing preferences and other settings.  Unless you have a very strong reason however, I recommend that you avoid creating your own username and password database for your application.  Doing so can seem really easy at first, but as your application gets more popular you’ll be left with a nightmare situation of having to deal with registration issues, password resets, and all of the other administration that comes with owning your own identity provider.&lt;/p&gt;
&lt;p&gt;If you are building a mobile web application for the enterprise, I suspect you’ll already be thinking about this – either hooking in to an existing Active Directory instance or other identity provider (although you’ll likely need to consider how this will work outside the firewall when your mobile users are accessing your application via a public connection).&lt;/p&gt;
&lt;p&gt;If you are building a public-facing application however, an efficient solution can be to federate with an existing identity provider.  Chances are your users already have a Google, Yahoo, or Facebook account.  Why not take advantage of this and use this sign-in information to authenticate the user for your application?  This can be done in a couple of different ways – either with a native SDK from one of the providers – or using a federated service such as Microsoft Azure’s &lt;a href=&quot;http://acs.codeplex.com/&quot;&gt;Access Control Service&lt;/a&gt;.  This is a simple service to setup, which will enable you to configure a list of providers and returns a bag of claims to your application which you can use to match up with a list of settings, preferences, etc.  There are a few caveats with this approach, especially as some of the providers return the information via a post back (which can really upset your mobile application if you’ve pre-fetched all of the pages in to the DOM beforehand).  This is something that I’ve written previously about in &lt;a href=&quot;http://simonguest.com/2011/08/13/authenticating-with-google-facebook-and-others-from-your-jquerymobile-application/&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make your Mobile Web application perform well&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It might sound obvious, but if you want your Mobile Web application to come anywhere near to the performance of a native application, you’ll want to keep a keen eye on performance.  Generally, I’ve found there are three main causes of bad performance in Mobile Web applications:&lt;/p&gt;
&lt;p&gt;First is server-side generation of the UI and round tripping (as discussed in the point on client-side JavaScript earlier).  If you are generating any of the UI on the server-side or making any synchronous server-side calls, you are more than likely to run in to trouble.&lt;/p&gt;
&lt;p&gt;Second is too many CSS effects/transitions.  Many of the UI frameworks, including jQuery Mobile, include several page transitions for when the user navigates between different pages.  Unless you are exclusively targeting iOS devices, I would recommend turning all of these off.  Many of the older Android devices don’t implement a version of Webkit that supports hardware acceleration – plus they are running on less capable hardware – so to avoid creating an application that stutters on Android devices, it’s best to disable any transitions and effects.&lt;/p&gt;
&lt;p&gt;Finally, watch out for too many registered JavaScript events (especially on the class level).  The JavaScript performance on mobile browsers can be much lower than desktop equivalents, and if you are not careful you can end up where the performance of the browser is being compromised by too many registered events.  Often this will only add 100ms to various events, but combine this with specific events (such as a button tap) that must immediately navigate to another page, any delay over 100ms might be enough that your user thinks that the button wasn’t pressed correctly.  They’ll press it again, and before you know it you have two JavaScript navigation events that you’ll need to handle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wrapping up&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A bit of a lengthy post, but I hope that this is useful if you are heading down the path of developing Mobile Web applications.  If you’d like more information on this, or maybe to share with colleagues, I’ve uploaded &lt;a href=&quot;http://www.slideshare.net/simonguest/top-ten-tips-for-html5mobile-web-development&quot;&gt;this presentation&lt;/a&gt; to SlideShare that goes through the above list in some detail.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Extracting and Using Facebook OAuth Token from ACS</title>
      <link>//2011/11/11/extracting-and-using-facebook-oauth-token-from-acs/</link>
      <pubDate>Fri, 11 Nov 2011 05:23:39 -0800</pubDate>
      <guid isPermaLink="true">//2011/11/11/extracting-and-using-facebook-oauth-token-from-acs/</guid>
      <author></author>
      <description>&lt;p&gt;A couple of my previous blog posts have shown how AppFabric ACS (Access Control Service) can be used as part of the Windows Azure Toolkit for iOS to enable federated authentication with Facebook, Google, Yahoo, and other providers. I was recently asked whether it’s possible to extract an OAuth token as part of the ACS sign in process that can then be presented to Facebook’s Graph API in order to access details such as friends lists, photos, etc. In this post, I’ll cover how this can be done.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The first step is of course to display the authentication page. As you’ve seen in previous posts, this can be achieved using the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-objectivec&quot;&gt;WACloudAccessControlClient *acsClient = [WACloudAccessControlClient accessControlClientForNamespace:@“iostest-walkthrough” realm:@“uri:wazmobiletoolkit”];
[acsClient showInViewController:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; allowsClose:&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt; withCompletionHandler:^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; authenticated) { &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!authenticated) { &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;Error authenticating&quot;&lt;/span&gt;); } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; { WACloudAccessToken *token = [WACloudAccessControlClient sharedToken]; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *securityToken = [token securityToken]; ... }
}];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the application, this will display the federated login dialog, and prompt the user to enter their Facebook credentials.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/extracting-and-using-facebook-oauth-token-from-acs/facebooklogin.jpg&quot; alt=&quot;Facebook Login&quot;&gt;&lt;/p&gt;
&lt;p&gt;You’ll notice that the ACS client returns a cloud access token, of which a security token can be extracted. This security token is a set of claims returned from ACS. Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://schemas.microsoft.com/ws/2008/06/identity/claims/expiration=2011-11-11T22:00:00.3593475Z&amp;amp;amp;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress=me%40simonguest.com&amp;amp;amp;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name=Simon+Guest&amp;amp;amp;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier=677830765&amp;amp;amp;http://www.facebook.com/claims/AccessToken=AAADWLwgHWSUBABBXdxbhJB0ZBtA3VOfPSsqzKKwObAtW2rb8EGGTQ8EvnvAdNOcZAGpKfV2gSGbNg7f0gxk4BhI1rhzKEn17VLw343gZDZD&amp;amp;amp;http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider=Facebook-235497486506277&amp;amp;amp;Audience=uri:wazmobiletoolkit&amp;amp;amp;ExpiresOn=1321044986&amp;amp;amp;Issuer=https://iostest-walkthrough.accesscontrol.windows.net/&amp;amp;amp;HMACSHA256=bnvyPmX4/PcWhiImgVVIvSqwHpc4cfi0vI6%2b/BSDK0Q%3d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we want to make follow on calls to Facebook’s Graph API, we are going to need to present the Facebook User ID and an OAuth Token. Fortunately both of these can be extracted from the token.&lt;/p&gt;
&lt;p&gt;To extract this, we first HTTP encode the token:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-objectivec&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *httpEncoding = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; arrayWithObjects:[&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; arrayWithObjects:@&lt;span class=&quot;string&quot;&gt;&quot;%3a&quot;&lt;/span&gt;,@&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;], [&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; arrayWithObjects:@&lt;span class=&quot;string&quot;&gt;&quot;%2f&quot;&lt;/span&gt;,@&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;], &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];
&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ([httpEncoding count] &amp;amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) { securityToken = [securityToken stringByReplacingOccurrencesOfString:[[httpEncoding objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] withString:[[httpEncoding objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] objectAtIndex:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]]; [httpEncoding removeObjectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; }
&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using a simple RegEx search we can extract the Facebook User ID:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-objectivec&quot;&gt;NSRegularExpression regex = [NSRegularExpression regularExpressionWithPattern:@“http:&lt;span class=&quot;comment&quot;&gt;//schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier=([0-9])” options:0 error:&amp;amp;amp;error];&lt;/span&gt;
NSTextCheckingResult *match = [regex firstMatchInString:securityToken options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; range:NSMakeRange(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, [securityToken length])]; firstRange = [match rangeAtIndex:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; fbuserId = [securityToken substringWithRange:firstRange];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the required OAuthToken:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-objectivec&quot;&gt;regex = [NSRegularExpression regularExpressionWithPattern:@“http:&lt;span class=&quot;comment&quot;&gt;//www.facebook.com/claims/AccessToken=([A-Za-z0-9]*)” options:0 error:&amp;amp;amp;error];&lt;/span&gt;
match = [regex firstMatchInString:securityToken options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; range:NSMakeRange(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, [securityToken length])];
&lt;span class=&quot;built_in&quot;&gt;NSRange&lt;/span&gt; firstRange = [match rangeAtIndex:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];
oauthToken = [securityToken substringWithRange:firstRange];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it’s just a case of calling the Graph API using these credentials:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-objectivec&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *graphURL = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:@“https:&lt;span class=&quot;comment&quot;&gt;//graph.facebook.com/%@/friends?access_token=%@”,fbuserId,oauthToken];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the purposes of this post, let’s take a quick look at my list of friends.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-objectivec&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURLRequest&lt;/span&gt; *request = [&lt;span class=&quot;built_in&quot;&gt;NSURLRequest&lt;/span&gt; requestWithURL:[&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; URLWithString:graphURL]];
NSURLResponse *response = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;
NSData *data = [&lt;span class=&quot;built_in&quot;&gt;NSURLConnection&lt;/span&gt; sendSynchronousRequest:request returningResponse:&amp;amp;amp;response error:&amp;amp;amp;error];
&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *friendsList = [[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; alloc] initWithData:data encoding:NSUTF8StringEncoding];
regex = [NSRegularExpression regularExpressionWithPattern:@“&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;” options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; error:&amp;amp;amp;error];
NSUInteger friendCount = [regex numberOfMatchesInString:friendsList options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; range:NSMakeRange(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, [friendsList length])];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Displaying the friend count in a UIAlertView on the screen shows how popular (or not!) I am:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/extracting-and-using-facebook-oauth-token-from-acs/facebookmessage.jpg&quot; alt=&quot;Facebook Message&quot;&gt;&lt;/p&gt;
&lt;p&gt;A simple example, but hopefully this shows not only that you can authenticate against Facebook using AppFabric ACS, but also how the returned Facebook User ID and OAuth Token can be used to make further calls to Facebook using the user’s credentials.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Working with the Windows Azure Toolkit for Android</title>
      <link>//2011/10/21/working-with-the-windows-azure-toolkit-for-android/</link>
      <pubDate>Fri, 21 Oct 2011 08:16:18 -0700</pubDate>
      <guid isPermaLink="true">//2011/10/21/working-with-the-windows-azure-toolkit-for-android/</guid>
      <author></author>
      <description>&lt;p&gt;At the end of August, Microsoft &lt;a href=&quot;http://www.zdnet.com/blog/microsoft/microsoft-rolls-out-windows-azure-toolkit-for-android/10503&quot;&gt;published&lt;/a&gt; the Windows Azure Toolkit for Android. At Neudesic, the partner behind developing the both toolkits for iOS and Android, we’ve been working with customers that use the toolkit to connect mobile applications to the cloud. One of the recent requests however has been to provide a walkthrough of getting started with the toolkit. The current build on &lt;a href=&quot;http://github.com/microsoft-dpe&quot;&gt;GitHub&lt;/a&gt; was released for a specific version of Eclipse and the Android tools, and as a result, can be a little challenging getting the library and sample code up and running. In this post, I’ll explain what it takes to download the toolkit, create a brand new environment in Eclipse, and get started quickly with the toolkit.&lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;more&quot;&gt;&lt;span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Getting Started – What You’ll Need&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Firstly, there is a list of tools that you’ll need to download.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Eclipse.&lt;/strong&gt; Download from &lt;a href=&quot;http://eclipse.org&quot;&gt;http://eclipse.org&lt;/a&gt; – we’ll be using Helios in this tutorial.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JDK. &lt;/strong&gt; We’ll be using the default that ships with Mac OSX, but if you are on a PC, you’ll need JDK 1.6 or higher.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Android SDK and Eclipse Tooling.&lt;/strong&gt; Download the Android SDK from &lt;a href=&quot;http://developer.android.com&quot;&gt;http://developer.android.com&lt;/a&gt; (we are using r14 for this walkthrough). Also follow the instructions for configuring the Android tooling within Eclipse. After you have installed everything, use the AVD manager to setup a new AVD for an Android 2.3.3 device.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Setting Up the Library in Eclipse&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To import and build the library in Eclipse, perform the following steps.&lt;/p&gt;
&lt;p&gt;Download the Windows Azure Toolkit for Android from GitHub. If you have the Git client installed, you can use this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/microsoft-dpe/wa-toolkit-android
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Otherwise, go to the site and pull down the zip file of the repo.&lt;/p&gt;
&lt;p&gt;Create a new directory for your Eclipse workspace:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir wa-toolkit-android-workspace
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Launch Eclipse, and point the default workspace to this newly created directory:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/working-with-the-windows-azure-toolkit-for-android/workspace.jpg&quot; alt=&quot;Work Space&quot;&gt;￼&lt;/p&gt;
&lt;p&gt;Create a new Android project called &lt;strong&gt;AzureLibrary&lt;/strong&gt;, set the target to Android 2.3.3, use &lt;strong&gt;com.microsoft.cloud.android&lt;/strong&gt; as the package name, but do not create an activity or test project.
&lt;img src=&quot;/articles/working-with-the-windows-azure-toolkit-for-android/newproject.jpg&quot; alt=&quot;New Project&quot;&gt;&lt;/p&gt;
&lt;p&gt;Right click on the AzureLibrary project and select &lt;strong&gt;Import&lt;/strong&gt;. Choose &lt;strong&gt;General&lt;/strong&gt; / &lt;strong&gt;File System&lt;/strong&gt; as the import source, and click on &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Browse to the /library/src/com folder in the toolkit folder that you downloaded from GitHub.&lt;/p&gt;
&lt;p&gt;Click on the &lt;strong&gt;Browse (into folder) &lt;/strong&gt;button and select the src folder under your project. Expand the &lt;strong&gt;src&lt;/strong&gt; folder, and check the &lt;strong&gt;com &lt;/strong&gt;folder as shown in this screenshot:
&lt;img src=&quot;/articles/working-with-the-windows-azure-toolkit-for-android/import.jpg&quot; alt=&quot;Import&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on the Finish button. The import will complete.
&lt;img src=&quot;/articles/working-with-the-windows-azure-toolkit-for-android/packageexplorer.jpg&quot; alt=&quot;Package Explorer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Right click on the project, select properties, and change the Java compiler version from 1.5 to 1.6. (The default is 1.5, yet the toolkit uses many constructs only supported in 1.6)
&lt;img src=&quot;/articles/working-with-the-windows-azure-toolkit-for-android/properties.jpg&quot; alt=&quot;Properties&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click OK, and say &lt;strong&gt;yes&lt;/strong&gt; to rebuilding the project. The project should now build with no errors.&lt;/p&gt;
&lt;p&gt;Assuming everything builds correctly, right click on the project, and select Properties again. Go to the Android setting, and click on the &lt;strong&gt;Is Library&lt;/strong&gt; check box.
&lt;img src=&quot;/articles/working-with-the-windows-azure-toolkit-for-android/islibrary.jpg&quot; alt=&quot;Is Library&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Setting Up the Sample Application in Eclipse&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To import and build the sample application in Eclipse, perform the following steps:&lt;/p&gt;
&lt;p&gt;Create a new Android project called &lt;strong&gt;AzureSample&lt;/strong&gt;. Select Android 2.3.3, set the namespace to &lt;strong&gt;com.windowsazure.samples.sample&lt;/strong&gt;, and choose not to create an activity.
&lt;img src=&quot;/articles/working-with-the-windows-azure-toolkit-for-android/sample.jpg&quot; alt=&quot;Sample&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you did with the library, right click on the project, and select &lt;strong&gt;Import&lt;/strong&gt;. Select the &lt;strong&gt;/samples/simple/src&lt;/strong&gt; as the source and import into the &lt;strong&gt;AzureSample/src&lt;/strong&gt; folder.
&lt;img src=&quot;/articles/working-with-the-windows-azure-toolkit-for-android/filesystem.jpg&quot; alt=&quot;File System&quot;&gt;&lt;/p&gt;
&lt;p&gt;Right click on the project, select &lt;strong&gt;Properties&lt;/strong&gt;, select &lt;strong&gt;Android&lt;/strong&gt; and add a reference to the &lt;strong&gt;AzureLibrary&lt;/strong&gt; project:
&lt;img src=&quot;/articles/working-with-the-windows-azure-toolkit-for-android/addrefs.jpg&quot; alt=&quot;Add Refs&quot;&gt;&lt;/p&gt;
&lt;p&gt;Right click on the project, select &lt;strong&gt;Import&lt;/strong&gt;. Import from the &lt;strong&gt;/samples/simple/res&lt;/strong&gt; folder into the &lt;strong&gt;AzureSample/res&lt;/strong&gt; folder. This will import the resources required for the sample application.
&lt;img src=&quot;/articles/working-with-the-windows-azure-toolkit-for-android/importresources.jpg&quot; alt=&quot;Import Resources&quot;&gt;&lt;/p&gt;
&lt;p&gt;Answer &lt;strong&gt;yes &lt;/strong&gt;when prompted to overwrite the &lt;strong&gt;main.xml&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;Right click on project, select &lt;strong&gt;Import&lt;/strong&gt; and select the file system again. Select the &lt;strong&gt;AndroidManifest.xml&lt;/strong&gt; from the root of the source directory and import into the root of the destination project.
&lt;img src=&quot;/articles/working-with-the-windows-azure-toolkit-for-android/importresources2.jpg&quot; alt=&quot;Import Resources 2&quot;&gt;&lt;/p&gt;
&lt;p&gt;The Sample project should now build with no errors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configuring your Windows Azure Account Name and Key&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to setup the sample project, you need to supply your account name and key, as provided by Windows Azure. You can obtain this by logging into the Windows Azure Portal (&lt;a href=&quot;http://windows.azure.com&quot;&gt;http://windows.azure.com&lt;/a&gt;) and navigating to Storage Accounts to obtain the details.&lt;/p&gt;
&lt;p&gt;When you have the name and key, perform the following:&lt;/p&gt;
&lt;p&gt;In the sample project, open &lt;strong&gt;ProxySelector.java&lt;/strong&gt; from the &lt;strong&gt;src/com.windowsazure.samples.sample&lt;/strong&gt; package.
At the top of the file replace the &lt;strong&gt;ACCOUNT&lt;/strong&gt; and &lt;strong&gt;ACCESS_KEY&lt;/strong&gt; values with the account name and access key for your Azure storage account.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Running the Sample&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To run the sample, right click on the sample project, select &lt;strong&gt;Run As / Android Application.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once the emulator is up and running, unlock the device.&lt;/p&gt;
&lt;p&gt;Refer to the LogCat/Console window in Eclipse if there are any errors.&lt;/p&gt;
&lt;p&gt;Click on the Start button in the sample application.&lt;/p&gt;
&lt;p&gt;Select either table, blob, or queue storage and browse the storage associated with your Windows Azure account.
&lt;img src=&quot;/articles/working-with-the-windows-azure-toolkit-for-android/demo.jpg&quot; alt=&quot;Demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;That’s it! Your sample application is now up and running, and you are able to browse Windows Azure storage!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Authenticating with Google, Facebook, and others from your jQueryMobile Application</title>
      <link>//2011/08/12/authenticating-with-google-facebook-and-others-from-your-jquerymobile-application/</link>
      <pubDate>Fri, 12  Aug 2011 22:13:20 -0700</pubDate>
      <guid isPermaLink="true">//2011/08/12/authenticating-with-google-facebook-and-others-from-your-jquerymobile-application/</guid>
      <author></author>
      <description>&lt;p&gt;In my last post, I showed how to implement authentication using Google, Facebook, etc. for your iOS application – using the &lt;a href=&quot;http://github.com/microsoft-dpe&quot;&gt;Windows Azure Toolkit for iOS&lt;/a&gt;.  This works well for iPhone applications written in Objective C, but what if you are developing a Web based mobile applications that span multiple platforms?  Given that everything is using Web pages, you would hope that it would be a little easier, but things can get tricky - especially if you are using jQueryMobile. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Having implemented this a couple of times now, here is a rough guide of how to integrate AppFabric ACS (Access Control Service) authentication into a jQueryMobile application. (There is already a ton of documentation of both jQueryMobile and ACS, so I’m assuming that you understand the basics of how these both work).   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1:  Create your own provider selection screen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you first start playing around with using ACS on mobile web browsers, the first thing you’ll notice is that the default login page isn’t that nice. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/authenticating-with-google-facebook-and-others-from-your-jquerymobile-application/defaultlogin.png&quot; alt=&quot;Default Login&quot;&gt;&lt;/p&gt;
&lt;p&gt;While the functionality of logging in will work, users have to pinch zoom to be able to read the buttons, which isn’t a great experience.  It also doesn’t fit in with any jQueryMobile theme that you may have created.  To overcome this, we can create our own provider screen. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/authenticating-with-google-facebook-and-others-from-your-jquerymobile-application/jquerylogin.png&quot; alt=&quot;jQuery Login&quot;&gt;&lt;/p&gt;
&lt;p&gt;To build something similar to the above, I’ve used a jQueryMobile &lt;a href=&quot;http://jquerymobile.com/test/docs/pages/dialog-alt.html&quot;&gt;Dialog&lt;/a&gt; (which has an automatic border as well as a background effect).  The basic code for the screen looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Select Login Provider&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-role&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;dialog&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-role&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Select Login Provider&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-role&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
            @{
                if (ViewBag.JSONProviders != null)
                    {
                    var providers = Json.Decode(ViewBag.JSONProviders);
                    foreach (var provider in providers)
                    {
                        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;javascript:window.location.href='@provider.LoginUrl'&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@provider.Name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    }
                }
            }
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see from the above, the form is built by parsing a JSON object containing a list of identity providers and creating buttons for each provider – setting a name for a button and setting an on click action to the URL.  (The above code uses the Razor-based syntax for  ASP.NET MVC, but the same will work just by using JSON calls in regular Javascript). &lt;/p&gt;
&lt;p&gt;Two things to note here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It’s really important to use &lt;strong&gt;window.location.href&lt;/strong&gt; instead of an anchor when linking to the provider – otherwise you’ll break the AJAX model of your jQueryMobile app and a new browser window will be launched (which looks horrible, especially in full screen web applications).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You are probably asking yourself where the JSON objects actually come from.  This brings us to our next point…&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Step 2:  Make a call to the ACS JSON endpoint&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The buttons in the form are based on identity providers, which you likely setup when you configured ACS.  These providers can be extracted as JSON objects using a JSON based endpoint that the ACS service providers. &lt;/p&gt;
&lt;p&gt;Here’s the URL of the JSON endpoint for ACS v2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://{0}.accesscontrol.windows.net/v2/metadata/IdentityProviders.js?protocol=wsfederation&amp;amp;realm={1}&amp;amp;reply_to={2}&amp;amp;context=&amp;amp;request_id=&amp;amp;version=1.0](https://{0}.accesscontrol.windows.net/v2/metadata/IdentityProviders.js?protocol=wsfederation&amp;amp;realm={1}&amp;amp;reply_to={2}&amp;amp;context=&amp;amp;request_id=&amp;amp;version=1.0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;{0} is the namespace of your ACS service&lt;/p&gt;
&lt;p&gt;{1} is the realm within your ACS service&lt;/p&gt;
&lt;p&gt;{2} is an optional URL (which must be HTML encoded) that specifies where to return the browser once authentication has been completed.  Remember, if you are using AJAX navigation, then you’ll want to pass in the correct #-prefixed syntax.  For example a return URL of the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/MyWebApp#/MyWebApp/Accounts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Will instruct the ACS service to return to the Accounts page in your jQueryMobile app.&lt;/p&gt;
&lt;p&gt;Again, you can make the call to the JSON endpoint using Javascript, or if you are using ASP.NET MVC like in Step 1 I would recommend creating a controller action called Providers which passes the return JSON object in a ViewBag. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3:  Launch the providers screen from your app&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally, once you have your provider screen created, you’ll need to call it when authentication is required.  There are a couple of different ways of doing this – if you are using Javascript only, then create and maintain a variable called claims – which corresponds to the claims bag returned from the service (when the ACS service returns it does a post back to your application so that you can capture the claims).  Secondly, if you are using ASP.NET MVC then you can create a second action on the Account controller called claims with something similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-csharp&quot;&gt;public JsonResult Claims()
{
    return Json(string.Join(&amp;quot;n&amp;quot;, ((IClaimsIdentity)this.User.Identity).Claims.Select(c =&amp;gt; c.ClaimType + &amp;quot;: &amp;quot; + c.Value).ToArray()));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will return the claims bag directly from the User.Identity property from the controller.&lt;/p&gt;
&lt;p&gt;Well, just a short overview, but if you are thinking of implementing Google and Facebook authentication in your jQueryMobile application, hopefully this has been of some help.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Using Federated Identity for iOS Applications</title>
      <link>//2011/08/01/using-federated-identity-for-ios-applications/</link>
      <pubDate>Mon, 01  Aug 2011 01:45:42 -0700</pubDate>
      <guid isPermaLink="true">//2011/08/01/using-federated-identity-for-ios-applications/</guid>
      <author></author>
      <description>&lt;p&gt;Last week, Microsoft released v1.2 of the Windows Azure Toolkit for iOS.  As development partner for the toolkit, &lt;a href=&quot;http://www.neudesic.com&quot;&gt;Neudesic&lt;/a&gt; has been working with several customers on implementing ACS for iPhone and iPad applications.  Due to popular demand, I wanted to share a short overview of how simple it is to get this up and working for your own iOS projects.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, some background…&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many iPhone and iPad applications have a need to authenticate.  Maybe it’s to access sensitive information or record a particular high score against your name.  Implementing an authentication scheme for iOS can however be time consuming and tricky – you often have to create an authentication service, host it, expose the service through REST, and consume it on the device.  And afterwards you are responsible for backing up the user database and dealing with lost passwords, etc.&lt;/p&gt;
&lt;p&gt;To help overcome this many applications are now turning to external providers.  For example, to identify yourself when playing Zynga Poker, instead of creating a new account, you simply sign into Facebook (when launching the application for the first time) and the game uses these credentials as you play. This type of sign in method is called federated identity. This prevents Zynga from having to maintain a complex and large set of user accounts and passwords, and also prevents the player from having to remember yet another username and password. &lt;/p&gt;
&lt;p&gt;Adding federated identity to your iPhone or iPad application can be difficult, requiring knowledge of exchange secure tokens with a set of providers, and creating and sending the right OAuth headers in your application.  Removing this difficultly is exactly what we are trying to address in v1.2 of the Windows Azure Toolkit for iOS. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sounds great – how do I use it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To implement ACS in your application, you’ll first need to access the Windows Azure portal by navigating to &lt;a href=&quot;http://windows.azure.com/&quot;&gt;http://windows.azure.com&lt;/a&gt; and signing in with your credentials.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image002.png&quot; alt=&quot;clip_image002&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on the &lt;strong&gt;Service Bus, Access Control &amp;amp; &lt;/strong&gt;Caching menu item and select the &lt;strong&gt;Access Control&lt;/strong&gt; menu item under the &lt;strong&gt;AppFabric&lt;/strong&gt; folder.  Select an active Windows Azure subscription and click on the &lt;strong&gt;New&lt;/strong&gt; button in the toolbar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image004.png&quot; alt=&quot;clip_image004&quot;&gt;&lt;/p&gt;
&lt;p&gt;The new service namespace dialog will open.  Ensure that &lt;strong&gt;Access Control&lt;/strong&gt; is selected, and enter a unique namespace and country/region for the service.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image006.png&quot; alt=&quot;clip_image006&quot;&gt;&lt;/p&gt;
&lt;p&gt;The ACS namespace will now be created.  This might take a few minutes.  Wait until the namespace is showing in an &lt;strong&gt;Active&lt;/strong&gt; state.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image008.png&quot; alt=&quot;clip_image008&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once this is complete, highlight the newly created service and click on the &lt;strong&gt;Access Control Service&lt;/strong&gt; button in the toolbar.  This will launch the Access Control Service portal.&lt;/p&gt;
&lt;p&gt;Within the portal, click on &lt;strong&gt;Identity Providers&lt;/strong&gt; and add the identity providers you would like to use for your application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image010.png&quot; alt=&quot;clip_image010&quot;&gt;&lt;/p&gt;
&lt;p&gt;The default is Windows Live ID, but you can add other preconfigured providers (such as Google and Yahoo!) as well as external identity systems configured to use WS-Federation.&lt;/p&gt;
&lt;p&gt;Once you have added the required providers, click on the &lt;strong&gt;Relying Parties&lt;/strong&gt; section of the portal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image012.png&quot; alt=&quot;clip_image012&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on the &lt;strong&gt;Add&lt;/strong&gt; button and enter the following information for the relying party application:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt; – a given name for your application&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Realm&lt;/strong&gt; – a unique ID for your application.  For this walkthrough, we’ll be using uri:wazmobiletoolkit&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Return URL&lt;/strong&gt; – you can leave this blank&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Error URL&lt;/strong&gt; – you can leave this blank&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Token Format&lt;/strong&gt; – select SWT&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Token Lifetime&lt;/strong&gt; – Feel free to change the default from 600 seconds.&lt;/p&gt;
&lt;p&gt;Select the identity providers that you would like to use, and then under the &lt;strong&gt;Token Signing Settings&lt;/strong&gt; section, click on the &lt;strong&gt;Generate&lt;/strong&gt; button to create a new symmetric key that will be used for this application.&lt;/p&gt;
&lt;p&gt;Finally, click on the &lt;strong&gt;Save&lt;/strong&gt; button.  This will create the Relying Party Application.&lt;/p&gt;
&lt;p&gt;Next, go into the &lt;strong&gt;Rule Groups&lt;/strong&gt; section of the portal and select the default rule group that was created for the application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image014.png&quot; alt=&quot;clip_image014&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on the &lt;strong&gt;Generate&lt;/strong&gt; link in order to generate a set of default rules for this rule group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image016.png&quot; alt=&quot;clip_image016&quot;&gt;&lt;/p&gt;
&lt;p&gt;Select the providers that you wish to use, and click on the &lt;strong&gt;Generate&lt;/strong&gt; button.  Once this is complete, you should see a set of rules.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image018.png&quot; alt=&quot;clip_image018&quot;&gt;&lt;/p&gt;
&lt;p&gt;After this step is complete, ACS has now been configured correctly to be used with your iOS application.  Make a note of your Service Namespace (found at the top of the portal) and Realm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ok, the service is now setup.  How do I use it in my Xcode project?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To start, launch Xcode (4.02 or higher) and create a new project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image020.png&quot; alt=&quot;clip_image020&quot;&gt;&lt;/p&gt;
&lt;p&gt;From the project template dialog, select a &lt;strong&gt;View-based application&lt;/strong&gt; and click on the &lt;strong&gt;Next&lt;/strong&gt; button.  Enter a &lt;strong&gt;Product Name&lt;/strong&gt; and &lt;strong&gt;Company Identifier&lt;/strong&gt; and click on the &lt;strong&gt;Next&lt;/strong&gt; button to continue.  Select a directory to use for the project file and return to the IDE.&lt;/p&gt;
&lt;p&gt;Next, download the latest version of the Windows Azure Toolkit for iOS library from &lt;a href=&quot;http://github.com/microsoft-dpe/watoolkitios-lib&quot;&gt;http://github.com/microsoft-dpe/watoolkitios-lib&lt;/a&gt;. In the download will be a zip file containing two versions of the library (one for the device, one for the simulator) and some header files for the project.&lt;/p&gt;
&lt;p&gt;Right click on your project and select the &lt;strong&gt;Add Files to…&lt;/strong&gt; menu option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image022.png&quot; alt=&quot;clip_image022&quot;&gt;&lt;/p&gt;
&lt;p&gt;Locate the .a file (for the simulator) and header files and add them to your project.  You may want to create a new group (called lib) to store these in.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image024.png&quot; alt=&quot;clip_image024&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now we need to add a reference to a library required for XML parsing.  To do this, click on the top most project file, click on the target in the 2nd column of the IDE, and select &lt;strong&gt;Build Phases&lt;/strong&gt; from the tab menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image026.png&quot; alt=&quot;clip_image026&quot;&gt;&lt;/p&gt;
&lt;p&gt;In the main window, expand the &lt;strong&gt;Link Binary with Libraries&lt;/strong&gt; option.&lt;/p&gt;
&lt;p&gt;Ensure that the libwatoolkitios.a file has been automatically added as a reference, click the + button to add a new library, and select the libxml2.dylib library from the drop down list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image028.png&quot; alt=&quot;clip_image028&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on the &lt;strong&gt;Add&lt;/strong&gt; button to add a reference to this library for your project.&lt;/p&gt;
&lt;p&gt;Before we start adding any code, we need to add a couple of required linker flags to the project.  To do this, click on the &lt;strong&gt;Build Settings&lt;/strong&gt; tab (next to Build Phases).&lt;/p&gt;
&lt;p&gt;In the search box, type “other linker” to filter the settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image030.png&quot; alt=&quot;clip_image030&quot;&gt;&lt;/p&gt;
&lt;p&gt;You should see a setting called &lt;strong&gt;Other Linker Flags&lt;/strong&gt;.  Double click on the right side of this row to add new flags.&lt;/p&gt;
&lt;p&gt;Click on the + button to add two flags.  The first is &lt;strong&gt;–ObjC&lt;/strong&gt; and the second is &lt;strong&gt;–all_load&lt;/strong&gt;.  Once complete, your linker flags should look like the following screenshot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image032.png&quot; alt=&quot;clip_image032&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on the &lt;strong&gt;Done&lt;/strong&gt; button to save these settings.  The project is now configured correctly to reference the Windows Azure Toolkit library.&lt;/p&gt;
&lt;p&gt;To test that the library works, click on the project’s &lt;strong&gt;[ProjectName]AppDelegate.m&lt;/strong&gt; file.  Add the following #import statement at the top of the class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-objectivec&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import &lt;span class=&quot;title&quot;&gt;&quot;WACloudAccessControlClient.h&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, search for a method called &lt;strong&gt;didFinishLaunchingWithOptions &lt;/strong&gt;and after the &lt;strong&gt;[self.window makeKeyAndVisible]&lt;/strong&gt; line, enter the following code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-objectivec&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;Intializing the Access Control Client...&quot;&lt;/span&gt;);
WACloudAccessControlClient *acsClient = [WACloudAccessControlClient accessControlClientForNamespace:@&lt;span class=&quot;string&quot;&gt;&quot;iostest-walkthrough&quot;&lt;/span&gt; realm:@&lt;span class=&quot;string&quot;&gt;&quot;uri:wazmobiletoolkit&quot;&lt;/span&gt;];
[acsClient showInViewController:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.viewController&lt;/span&gt; allowsClose:&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt; withCompletionHandler:^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; authenticated) {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!authenticated)
    {
        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;Error authenticating&quot;&lt;/span&gt;);
    }
    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
    {
        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;Creating the authentication token...&quot;&lt;/span&gt;);
        WACloudAccessToken *token = [WACloudAccessControlClient sharedToken];
        &lt;span class=&quot;comment&quot;&gt;/* Do something with the token here! */&lt;/span&gt;
    }
}];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace the namespace and realm in the first line with the service namespace and realm for your own service.&lt;/p&gt;
&lt;p&gt;As you can see from the above, the code creates a new instance of the access control client, requests that the client shows itself in the current view controller, and then extracts a token.&lt;/p&gt;
&lt;p&gt;Build and run the application in the iOS Simulator.&lt;/p&gt;
&lt;p&gt;Once the application starts, you should be prompted to select an identity provider from the list that you configured in your ACS service.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image034.png&quot; alt=&quot;clip_image034&quot;&gt;&lt;/p&gt;
&lt;p&gt;Pick one of the providers, and enter a valid set of credentials.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image036.png&quot; alt=&quot;clip_image036&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on the &lt;strong&gt;Remember me&lt;/strong&gt; checkbox if you want to skip this step when running this application again, and click on the &lt;strong&gt;Sign in&lt;/strong&gt; button.&lt;/p&gt;
&lt;p&gt;The first time the application is run, you’ll be prompted to authorize the application to access your provider data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-federated-identity-for-ios-applications/clip_image038.png&quot; alt=&quot;clip_image038&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on the &lt;strong&gt;Allow&lt;/strong&gt; button to continue.  The login window will now disappear and you’ll be returned to your application.&lt;/p&gt;
&lt;p&gt;In the debug window, you should see the following two logs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2011-07-22 10:12:26.284 iostest-walkthrough[25838:207] Intializing the Access Control Client...
2011-07-22 10:12:36.359 iostest-walkthrough[25838:207] Creating the authentication token...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are seeing this, congratulations!  You’ve successfully setup federated identity for your application.  The final message indicates that the access token was retrieved and can be used for further use.  The &lt;strong&gt;WACloudAccessToken&lt;/strong&gt; (derived from &lt;strong&gt;[WACloudAccessControlClient sharedToken]&lt;/strong&gt;) contains an NSDictionary of claims and other properties that can be stored within your application.  Using these properties on future calls can be used to identify returning users to your application.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Running Visual Studio 2010 on the Mac</title>
      <link>//2011/05/27/running-visual-studio-2010-on-the-mac/</link>
      <pubDate>Fri, 27 May 2011 09:11:29 -0700</pubDate>
      <guid isPermaLink="true">//2011/05/27/running-visual-studio-2010-on-the-mac/</guid>
      <author></author>
      <description>&lt;p&gt;Following a few recent presentations, I’ve had a couple of people ask how I run Visual Studio on the Mac. &lt;/p&gt;
&lt;p&gt;You’ll be sad to hear that I don’t have a special version of Visual Studio for Mac OSX - instead I am using VMWare Fusion 3.1 to run a copy of Windows 7 in a virtual machine.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Fusion has a mode called “Unity” which allows windows from the virtual machine to interact with windows on the host operating system (even to the point where I can put icons for Windows-based applications in the dock on the Mac). There is a little performance hit running applications in this way vs. a full screen virtual machine, but it’s certainly useful for presentations where you are flipping between both environments.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/running-visual-studio-2010-on-the-mac/VSMac.png&quot; alt=&quot;VS Mac&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Using Apple Push Notifications from Windows Azure</title>
      <link>//2011/04/21/using-apple-push-notifications-from-windows-azure/</link>
      <pubDate>Thu, 21 Apr 2011 15:24:17 -0700</pubDate>
      <guid isPermaLink="true">//2011/04/21/using-apple-push-notifications-from-windows-azure/</guid>
      <author></author>
      <description>&lt;p&gt;In my &lt;a href=&quot;http://channel9.msdn.com/events/MIX/MIX11/EXT18&quot;&gt;MIX11 session&lt;/a&gt; last week I demonstrated how to create push notifications to iPhone and iPad devices from Wndows Azure.  I’ve put together this blog post to share more detail and the source code for how this works.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Firstly, if you haven’t already, you will need to register your iPhone/iPad application for push notifications.  To do this, log into the iOS developer center (you’ll need to be a registered Apple Developer) and in the provisioning portal setup a new App ID, enabling it for push notifications.  Here’s the App ID for my MIX demo:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-apple-push-notifications-from-windows-azure/status.png&quot; alt=&quot;Status&quot;&gt;&lt;/p&gt;
&lt;p&gt;With the development certificate that you downloaded during this process, create a new Azure worker role and import the certificate into a folder called “certs”:  In addition, you’ll need to configure the properties of the certificate file such that the build action is set to “Content”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/using-apple-push-notifications-from-windows-azure/project.png&quot; alt=&quot;Project&quot;&gt;&lt;/p&gt;
&lt;p&gt;(I’ve deliberately skimmed over the previous points of creating and App ID and Azure Worker role as they are both well documented by Apple and Microsoft).&lt;/p&gt;
&lt;p&gt;To start configuring the worker role for push notifications, first add a reference to the Windows Azure Storage Client (Microsoft.WindowsAzure.StorageClient) library.  In the OnRun section of the worker role, access the Azure queue that messages are going to be placed in.  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;StorageCredentials creds = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StorageCredentialsAccountAndKey(&lt;span class=&quot;string&quot;&gt;&quot;YOUR ACCOUNT NAME&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;YOUR ACCOUNT KEY&quot;&lt;/span&gt;);
CloudQueueClient cqc = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CloudQueueClient(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;YOUR QUEUE URL”, creds);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; testQueue = cqc.ListQueues().First(q =&amp;gt; q.Name.StartsWith(&lt;span class=&quot;string&quot;&gt;&quot;YOUR QUEUE NAME&quot;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, still within the OnRun method, create a routine that checks the queue for incoming messages and sets up the connection to the APN (Apple Push Notification) service.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)
            {
                Thread.Sleep(&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;);
                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (testQueue.RetrieveApproximateMessageCount() != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)
                {
                    List&amp;lt;cloudqueuemessage&amp;gt; messages = testQueue.GetMessages(testQueue.RetrieveApproximateMessageCount()).ToList();
                    &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (CloudQueueMessage message &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; messages)
                    {
                        Trace.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Retrieved message from Queue: &quot;&lt;/span&gt; + message.AsString);
                        &lt;span class=&quot;comment&quot;&gt;// open the APN connection&lt;/span&gt;
                        InitializeAPN();
                        &lt;span class=&quot;comment&quot;&gt;// send message&lt;/span&gt;
                        &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; session = message.AsString.Substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, message.AsString.IndexOf(&lt;span class=&quot;string&quot;&gt;':'&lt;/span&gt;));
                        SendAPNMessage(message.AsString, session);
                        &lt;span class=&quot;comment&quot;&gt;// tear down the APN connection&lt;/span&gt;
                        CloseAPN();
                        testQueue.DeleteMessage(message);
                    }
                }
            }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll probably want to do something a little more elegant than “while (true)” but this works for the purposes of this post.  Also, as I mentioned in the talk, you may or may not want to setup and tear down the connection to the APN for each message that you send.  If you are planning to send a large volume of messages to a large number of devices, Apple may view this as a denial of service attack and refuse your connection.  A more prescriptive approach in this scenario would be to instead open the connection in the OnStart method and keep it alive during OnRun.&lt;/p&gt;
&lt;p&gt;Within the worker role, setup the following declarations.  Most of these should be straightforward, and you’ll need to replace a number of them with your own details.  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; HOST = &lt;span class=&quot;string&quot;&gt;&quot;gateway.sandbox.push.apple.com&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; PORT = &lt;span class=&quot;number&quot;&gt;2195&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; CERT_PASSWORD = &lt;span class=&quot;string&quot;&gt;&quot;YOUR PASSWORD&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; X509Certificate2 CLIENT_CERT = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; X509Certificate2(Environment.GetEnvironmentVariable(&lt;span class=&quot;string&quot;&gt;&quot;RoleRoot&quot;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;@&quot;approotcertsmix11_dev_cert.p12&quot;&lt;/span&gt;, CERT_PASSWORD);
&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; X509Certificate2Collection CLIENT_CERT_COLLECTION = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; X509Certificate2Collection(CLIENT_CERT);
&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; DEVICE_TOKEN = &lt;span class=&quot;string&quot;&gt;&quot;YOUR DEVICE TOKEN&quot;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//Replace this with the Device token we obtain later on in this example&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TcpClient client;
&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; SslStream sslStream;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With these declarations in place, we can now start writing the APN code.  First, create an IntializeAPN method, responsible for setting up the connection to the APN.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InitializeAPN&lt;/span&gt;()
{
    client = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TcpClient(HOST, PORT);
    sslStream = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SslStream(client.GetStream(), &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;
    {
        sslStream.AuthenticateAsClient(HOST, CLIENT_CERT_COLLECTION, SslProtocols.Tls, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);
    }
    &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (AuthenticationException ex)
    {
        Trace.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Could not open APN connection: &quot;&lt;/span&gt; + ex.ToString());
    }
    Trace.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;APN connection opened successfully.&quot;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, create a method called SendAPNMessage which will construct and sent the push notification message in the correct format.  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SendAPNMessage&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; message, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; session)
        {
            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;
            {
                MemoryStream memoryStream = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MemoryStream();
                BinaryWriter binaryWriter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BinaryWriter(memoryStream);

                &lt;span class=&quot;comment&quot;&gt;// construct the message&lt;/span&gt;
                binaryWriter.Write((&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); 
                binaryWriter.Write((&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);  
                binaryWriter.Write((&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;); 

                &lt;span class=&quot;comment&quot;&gt;// convert to hex and write&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] deviceToken = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[DEVICE_TOKEN.Length / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];
                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; deviceToken.Length; i++)
                    deviceToken[i] = &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;.Parse(DEVICE_TOKEN.Substring(i * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), System.Globalization.NumberStyles.HexNumber);
                binaryWriter.Write(deviceToken);

                &lt;span class=&quot;comment&quot;&gt;// construct payload within JSON message framework&lt;/span&gt;
                String payload = &lt;span class=&quot;string&quot;&gt;&quot;{&quot;&lt;/span&gt;aps&lt;span class=&quot;string&quot;&gt;&quot;:{&quot;&lt;/span&gt;alert&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot; + message + &quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;session&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;+session+&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;badge&lt;span class=&quot;string&quot;&gt;&quot;:1}}&quot;&lt;/span&gt;;

                &lt;span class=&quot;comment&quot;&gt;// write payload data&lt;/span&gt;
                binaryWriter.Write((&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);                 
                binaryWriter.Write((&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)payload.Length);     
                &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] payloadBytes = System.Text.Encoding.UTF8.GetBytes(payload);
                binaryWriter.Write(payloadBytes);
                binaryWriter.Flush();

                &lt;span class=&quot;comment&quot;&gt;// send across the wire&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] array = memoryStream.ToArray();
                sslStream.Write(array);
                sslStream.Flush();
            }
            &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)
            {
                Trace.WriteLine(ex.ToString());
            }
            Trace.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Message successfully sent.&quot;&lt;/span&gt;);
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll notice that my SendAPNMessage method signature contains a “session” value.  For the purposes of the demo, I was sending across the session code that had changed as an explicit value in the notification message.  Feel free to change or remove this as you need.&lt;/p&gt;
&lt;p&gt;Finally, the close method is called to close the connection.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CloseAPN&lt;/span&gt;()
{
    client.Close();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, you might be wondering how you obtain the DEVICE_TOKEN value for the above.  This is not the UDID of the device, but instead a separate token that is generated by the phone itself.  To get this token, and to handle incoming push notifications, let’s turn our attention to the XCode project.  For my demo I was receiving push notifications within a &lt;a href=&quot;http://www.phonegap.com&quot;&gt;PhoneGap&lt;/a&gt; application, but this code will work equally in a regular native client application.&lt;/p&gt;
&lt;p&gt;First, we need to instruct the application to register for APN messages.  This is done using the registerForRemoteNotificationTypes method.  You’ll need to call this method when the application first starts up (for PhoneGap projects, this can be in the init method of the AppDelegate).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-objectivec&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;Registering for APN&quot;&lt;/span&gt;);
[[&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; sharedApplication] registerForRemoteNotificationTypes: (UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound)];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method has three callbacks that it can take advantage of.  One to indicate that registration was successful (we also get the Device ID from here), one to indicate that something went wrong (e.g. if we are running in the simulator, which doesn’t support push notifications), and one for when we actually receive a message).&lt;/p&gt;
&lt;p&gt;The first two are easy to handle:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-objectivec&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)application:(&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; *)app didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:@&lt;span class=&quot;string&quot;&gt;&quot;Device Token=%@&quot;&lt;/span&gt;,deviceToken];
    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;%@&quot;&lt;/span&gt;,str);
}

- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)application:(&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; *)app didFailToRegisterForRemoteNotificationsWithError:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *)err {
    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat: @&lt;span class=&quot;string&quot;&gt;&quot;Error: %@&quot;&lt;/span&gt;, err];
    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;%@&quot;&lt;/span&gt;,str);   
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how the first method (didRegisterForRemoteNotificationsWithDeviceToken) is where we actually extract the DEVICE_TOKEN string required in the worker role.  You’ll have to run this once, and copy and paste appropriately.  Of course, in a production environment, we would likely pass this value to the service via a separate call.  &lt;/p&gt;
&lt;p&gt;The third callback gets called when the device actually receives a message.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-objectivec&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)application:(&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; *)application didReceiveRemoteNotification:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)userInfo {
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; key in userInfo) {
        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;key: %@, value: %@&quot;&lt;/span&gt;, key, [userInfo objectForKey:key]);
        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *payload = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:@&lt;span class=&quot;string&quot;&gt;&quot;%@&quot;&lt;/span&gt;,[userInfo objectForKey:key]];

        &lt;span class=&quot;comment&quot;&gt;// work out the session code from the JSON payload&lt;/span&gt;
        NSRegularExpression* regex;
        NSTextCheckingResult* result;
        &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt;* error = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;
        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;* regexStr = @&lt;span class=&quot;string&quot;&gt;&quot;session = ([^']*);&quot;&lt;/span&gt;;
        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;* value = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;
        regex = [NSRegularExpression regularExpressionWithPattern:regexStr options:NSRegularExpressionCaseInsensitive error:&amp;amp;error];
        result = [regex firstMatchInString:payload options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; range:NSMakeRange(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, payload&lt;span class=&quot;variable&quot;&gt;.length&lt;/span&gt;)];

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(result &amp;amp;&amp;amp; [result numberOfRanges] == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)
        {
            &lt;span class=&quot;built_in&quot;&gt;NSRange&lt;/span&gt; r = [result rangeAtIndex:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];
            value = [payload substringWithRange:r];
        }

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(value)
        {
            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;Found session value in payload: %@&quot;&lt;/span&gt;,value);
            &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;* jsString = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:@&lt;span class=&quot;string&quot;&gt;&quot;handleOpenURL(&quot;&lt;/span&gt;[http:&lt;span class=&quot;comment&quot;&gt;//URLHERE.cloudapp.net/Session/Lookup?session=%@&quot;);&quot;,value];](http://URLHERE.cloudapp.net/Session/Lookup?session=%@&quot;);&quot;,value];)&lt;/span&gt;
            [webView stringByEvaluatingJavaScriptFromString:jsString];
        }
    }       
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see above, this method parses the payload of the message, tries to work out the session code, and if one is found, creates a new javascript call to a method called handleOpenURL which instructs PhoneGap to call the method of the same name.  Of course, you are going to want to configure this for your own scenario, but hopefully this gives you a sense of how to pass a value as part of the message, and then take an action on that accordingly.  &lt;/p&gt;
&lt;p&gt;Well, that wraps up this post.  I hope you enjoyed the talk at MIX, and that this code is useful if you have services in Windows Azure that have a need to push notification messages to iPhone and iPad devices.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Getting Authentication Working with WCF and WP7</title>
      <link>//2010/12/29/getting-authentication-working-with-wcf-and-wp7/</link>
      <pubDate>Wed, 29 Dec 2010 10:29:15 -0800</pubDate>
      <guid isPermaLink="true">//2010/12/29/getting-authentication-working-with-wcf-and-wp7/</guid>
      <author></author>
      <description>&lt;p&gt;Although Windows Phone 7 (WP7) has support for a Windows Communication Foundation (WCF) client, connecting to Web services that require authentication can be a little quirky. &lt;/p&gt;
&lt;p&gt;After working on a project over the holidays putting together a WP7 client to connect to a Web service requiring authentication, this is what I found…&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;NTLM/Kerberos is a no go…&lt;/p&gt;
&lt;p&gt;As of today, the WCF client on WP7 does not support NTLM or Kerberos authentication.  If you are accessing Web services from a device, you’ll want to make sure that the your server  is setup to handle Basic authentication (preferably over SSL).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And even Basic authentication needs a helping hand…&lt;/p&gt;
&lt;p&gt;Even with Basic authentication enabled on the server, I was noticing that the client was still not sending the right HTTP headers – even when setting the &lt;strong&gt;ClientCredentials&lt;/strong&gt; property on the client and playing with the config file.  No matter what I tried, I couldn’t get it to work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To overcome this however, you can force the Basic authentication details to be written as part of the request header.  To do this, first create a method that generates a UTF8 encoded string for your domain, username, and password:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetCredentials&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; domain, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; username, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; password)
{    
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Convert.ToBase64String(Encoding.UTF8.GetBytes(String.Format(&lt;span class=&quot;string&quot;&gt;@&quot;{0}{1}:{2}&quot;&lt;/span&gt;,domain,username,password)));      
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you’ll need to create a new property with your credentials:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;HttpRequestMessageProperty request = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpRequestMessageProperty();
request.Headers[System.Net.HttpRequestHeader.Authorization] = &lt;span class=&quot;string&quot;&gt;&quot;Basic &quot;&lt;/span&gt; + GetCredentials;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, add the header to your outgoing request:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;OperationContextScope clientScope = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OperationContextScope(client.InnerChannel);
OperationContext.Current.OutgoingMessageProperties.Add(HttpRequestMessageProperty.Name, request);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(in the above client is your service reference)&lt;/p&gt;
&lt;p&gt;And voila!  You should now have Basic authentication headers as part of your client requests, and you can access username/password protected Web services from your WP7 device!&lt;/p&gt;
&lt;p&gt;One final tip - during all of this you will likely need to use a tool like Fiddler to trace your requests and responses from the device.  If you are having troubles getting Fiddler working with the WP7 emulator, &lt;a href=&quot;http://phone7.wordpress.com/2010/10/17/fiddler-and-wp7-emulator-working/&quot;&gt;here&lt;/a&gt; is a great post that outlines what to do.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Test Driven Development (TDD) and Windows Phone 7</title>
      <link>//2010/10/18/test-driven-development-tdd-and-windows-phone-7/</link>
      <pubDate>Mon, 18 Oct 2010 00:00:00 -0700</pubDate>
      <guid isPermaLink="true">//2010/10/18/test-driven-development-tdd-and-windows-phone-7/</guid>
      <author></author>
      <description>&lt;p&gt;Kylen, my 6 year old son, is really into world flags. At home we have a sheet of around 200 flags from across the globe, and he’s pretty close at reciting all of them (and certainly much better than Mom and Dad!).&lt;/p&gt;
&lt;p&gt;Spending a couple of hours over labor day last month, I set myself a task of building a “Flag Matching” application for Windows Phone 7 (WP7). My goal was twofold: Build a simple application that he can use (and that I can offer on the marketplace), and at the same time, look into some of the TDD best practices for developing a WP7 application.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/test-driven-development-tdd-and-windows-phone-7/flag.png&quot; alt=&quot;Flag&quot;&gt;&lt;/p&gt;
&lt;p&gt;The application itself is simple enough. As shown above, the player gets presented with a picture of a flag, and four possible countries (of which only one is correct). A game consists of 20 flags, and the application maintains a high score table.&lt;/p&gt;
&lt;p&gt;During development of the application, this is what I found:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Setting up TDD for Windows Phone 7&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a new developer for Windows Phone 7, one of the first things you’ll quickly discover is that there is no option for a test project within the IDE. After creating a WP7 solution, I searched for the “WP7 Test Project” template, but to no avail…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/test-driven-development-tdd-and-windows-phone-7/addnewitem.png&quot; alt=&quot;Add New Item&quot;&gt;&lt;/p&gt;
&lt;p&gt;A quick search on the Web will offer up a few alternatives and chances are, you’ll quickly reach Jeff Wilcox’s session on &lt;a href=&quot;http://live.visitmix.com/MIX10/Sessions/CL59&quot;&gt;Unit Testing Silverlight &amp;amp; Windows Phone Applications&lt;/a&gt; from MIX10. This is a really good session, however the recommended approach (using a Silverlight-based unit test framework) can be somewhat limited.&lt;/p&gt;
&lt;p&gt;In my opinion, although it works well for small numbers of tests, not having unit tests outside the emulator makes it difficult for large test suites, using any continuous integration, and integrating with the IDE.&lt;/p&gt;
&lt;p&gt;If unit tests in the emulator don’t work for you either, here’s a workaround:&lt;/p&gt;
&lt;p&gt;In your solution, create a new project of type &lt;strong&gt;Windows Phone Class Library&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/test-driven-development-tdd-and-windows-phone-7/solution.png&quot; alt=&quot;Solution&quot;&gt;&lt;/p&gt;
&lt;p&gt;Name it appropriately (I called mine &lt;strong&gt;FlagMatch.Test&lt;/strong&gt;) and include a reference to the original Windows Phone project (&lt;strong&gt;FlagMatch&lt;/strong&gt;). Add the &lt;a href=&quot;http://nunit.org/&quot;&gt;NUnit&lt;/a&gt; unit test framework library as a reference (I’m using v2.0.50727) and write your tests as you normally would (of course, specific to the NUnit syntax).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;[TestFixture]
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; FlagModelTests
{
    [Test]
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestFourRandomFlags_AllUnique&lt;/span&gt;()
    {
        Assert.AreEqual(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, Flag.FourRandom.GroupBy(f =&amp;gt; f.Name).Select(f =&amp;gt; f).Count());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have a set of tests, you can then integrate these within Visual Studio. I’ve had reasonable luck with &lt;a href=&quot;http://sourceforge.net/projects/visualnunit/&quot;&gt;Visual NUnit&lt;/a&gt;, a free IDE plug in that works well with many versions of Visual Studio.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/test-driven-development-tdd-and-windows-phone-7/nunit.png&quot; alt=&quot;Nunit&quot;&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, if you use &lt;a href=&quot;http://www.jetbrains.com/resharper/&quot;&gt;ReSharper&lt;/a&gt;, you’ll find that their IDE integration works great also.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/test-driven-development-tdd-and-windows-phone-7/sessions.png&quot; alt=&quot;Sessions&quot;&gt;&lt;/p&gt;
&lt;p&gt;My preference is to use ReSharper as it works well with with another JetBrains product called &lt;a href=&quot;http://www.jetbrains.com/dotcover/&quot;&gt;dotCover&lt;/a&gt; – for which you can use to analyze test code coverage in your Windows Phone application.&lt;/p&gt;
&lt;p&gt;Although you’ll find the majority of your unit tests will work great, you may well come across some strange errors. Most of these will be related to operations on the phone that cannot be replicated outside the emulator. For example, accessing isolated storage or referring to embedded resources/images as part of the project works well within the emulator, but not so much from a class library.&lt;/p&gt;
&lt;p&gt;To get around this, you’ll need to create some mock objects to handle these operations. In my test project, I have a &lt;strong&gt;MockStorageProvider&lt;/strong&gt; that I use in place of calls to isolated storage:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;[Test]
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestResumeButton_NotVisibleOnStartup&lt;/span&gt;()
{
    MainViewModel viewModel = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MainViewModel(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MockStorageProvider());
    Assert.AreEqual(Visibility.Collapsed, viewModel.ResumeGameButtonVisibility);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, I pass the mock object to the view model (more on this in the next section) as an optional constructor parameter. All storage operations then use this MockStorageProvider instead of writing to isolated storage (which would have generated an exception during the tests). This also has the advantage that I can add additional tests within the mock object to ensure that the storage provider is being called correctly from the application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using MVVM with WP7&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For anyone with experience of testing Silverlight projects, you’ll know that although XAML provides a code separation layer, testing parts of the UI (e.g. actions when a button is pressed) can still be difficult. This can be overcome by using a pattern called &lt;a href=&quot;http://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;MVVM&lt;/a&gt; (Model View ViewModel). I’m not going to go into the details of MVVM here (there are plenty of other resources that do a great job) other than to say it can be used for WP7 applications with a little tweaking. The core reason is that WP7 is based largely on the SL3 codebase, which does not contain a complete commanding event model.&lt;/p&gt;
&lt;p&gt;There are a couple of approaches in order to get MVVM working on WP7. The first would be to reuse one of the existing samples/libraries available today. Your mileage may vary (as I found some were designed for pre-RTM versions), although I’ve heard good reviews about Laurent Bugnion’s &lt;a href=&quot;http://galasoft.ch/mvvm/getstarted/&quot;&gt;MVVMLite&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;If instead you’d like to learn how implement this yourself, here is how I achieved it:&lt;/p&gt;
&lt;p&gt;First, you should create a view model base. Assuming you are going to have multiple view models (I ended up with one per page), it’s a good idea.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; ViewModelBase : INotifyPropertyChanged
{
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged;

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NotifyPropertyChanged&lt;/span&gt;(String propertyName)
    {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (PropertyChanged != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)
        {
            PropertyChanged(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PropertyChangedEventArgs(propertyName));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, create your view model, inheriting from ViewModelBase.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; MainViewModel : ViewModelBase
{
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; NewGameButtonTitle
    {
        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AppResources.NewGameButtonTitle; }
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; NewGameCommand NewGameButton
    {
        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;
        {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NewGameCommand();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the purposes of this sample code, let’s imagine that we have a single page with a “New Game” button. As you can see above, the view model contains two properties – one for the title of the button, the second for the command that this button will be bound to.&lt;/p&gt;
&lt;p&gt;In order to implement the commands, you’ll need a couple of things. The first is a command service:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; CommandService
{
    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt; DependencyProperty _commandProperty;

    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; CommandService()
    {
        _commandProperty = DependencyProperty.RegisterAttached(&lt;span class=&quot;string&quot;&gt;&quot;Command&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(ICommand), &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(CommandService),
        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PropertyMetadata(OnCommandChanged));
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ICommand &lt;span class=&quot;title&quot;&gt;GetCommand&lt;/span&gt;(DependencyObject dependencyObject)
    {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (ICommand)dependencyObject.GetValue(_commandProperty);
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SetCommand&lt;/span&gt;(DependencyObject dependencyObject, ICommand &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;)
    {
        dependencyObject.SetValue(_commandProperty, &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;);
    }

    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OnCommandChanged&lt;/span&gt;(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dpceArgs)
    {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dependencyObject &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; Button)
        {
            &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; parameter = dependencyObject.GetValue(_commandProperty).ToString();
            Button button = (Button)dependencyObject;
            ICommand command = (ICommand)dpceArgs.NewValue;
            button.Click += &lt;span class=&quot;keyword&quot;&gt;delegate&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; sender, RoutedEventArgs arg) { command.Execute(parameter); };
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a good number of examples of this around (just search for MVVM) – this one I found in a great post from the &lt;a href=&quot;http://codingsolutions.blogspot.com/2010/03/steps-to-run-windows-phone-7-unit-test.html&quot;&gt;Coding Solutions&lt;/a&gt; blog.&lt;/p&gt;
&lt;p&gt;After this, you’ll need to create event handlers. Here’s a simple handler for when the new button is pressed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; CommandEvents
{
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; EventHandler NewGameButtonPressed;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your command itself simply implements the ICommand interface:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; NewGameCommand : ICommand
{
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewGameCommand&lt;/span&gt;()
    {
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CanExecute&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; parameter)
    {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;event&lt;/span&gt; EventHandler CanExecuteChanged;

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Execute&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; parameter)
    {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.CanExecute(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;))
        {
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (CommandEvents.NewGameButtonPressed != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)
            {
                CommandEvents.NewGameButtonPressed(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; EventArgs());
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With all these in place, you can now bind the command to the actual button in your XAML file. On your XAML page, you’ll need to add the following namespace:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;clear: both&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;xmlns:Commands=&quot;clr-namespace:FlagMatch.Commands&quot;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;pre&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And on the button itself, simply bind to the command using the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;button name=&amp;quot;button1&amp;quot; margin=&amp;quot;134,505,0,0&amp;quot; verticalalignment=&amp;quot;Top&amp;quot; commands:commandservice.command=&amp;quot;{Binding Path=NewGameButton}&amp;quot; content=&amp;quot;{Binding NewGameButtonTitle}&amp;quot; height=&amp;quot;72&amp;quot; horizontalalignment=&amp;quot;Left&amp;quot; width=&amp;quot;227&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice how the content of the button is bound to the &lt;strong&gt;NewGameButtonTitle&lt;/strong&gt; in the view model, and the command is bound to the &lt;strong&gt;NewGameButton&lt;/strong&gt; command. More importantly, notice also how there are no traditional event handlers needed here.&lt;/p&gt;
&lt;p&gt;The final piece of the puzzle is to register the view model and the button event handler in the XAML code behind. To do this, in the code behind, we create an instance of the view model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt; MainViewModel _mainViewModel = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MainViewModel();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in the constructor, bind the view model to the datacontext and register the button event handler.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;LayoutRoot.DataContext = _mainViewModel;
CommandEvents.NewGameButtonPressed += &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; EventHandler(StartGame);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The StartGame method simply performs a navigate action for us. This is something that just can’t be moved into the view model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StartGame&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; sender, EventArgs e)
{
    NavigationService.Navigate(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Uri(&lt;span class=&quot;string&quot;&gt;&quot;/GamePage.xaml&quot;&lt;/span&gt;, UriKind.Relative));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other than that, there is no additional UI logic required in code behind – which means for a slightly more complex implementation, but one that provides great test coverage.&lt;/p&gt;
&lt;p&gt;A final point worth noting is designer support. As you start building out controls using the MVVM paradigm, you’ll likely find that the designer ends up being difficult to use.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/test-driven-development-tdd-and-windows-phone-7/mvvmblank.png&quot; alt=&quot;MVVM Blank&quot;&gt;&lt;/p&gt;
&lt;p&gt;Because we are binding content directly to the view model, the designer doesn’t know where to pick up values to be shown at design time. Fortunately, there is a way around this. Simply add a reference to the view model in your App.xaml file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;local:mainviewmodel&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;x:key&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;MainViewModel&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;xmlns:local&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;clr-namespace:FlagMatch.ViewModels&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;local:mainviewmodel&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rebuild the project, and you’ll see that the designer picks up the default values from a instance of the view model class:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/test-driven-development-tdd-and-windows-phone-7/mvvmfilled.png&quot; alt=&quot;MVVM Filled&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Localization and MVVM&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally, I wanted to make sure that my MVVM model could be used for multiple languages.&lt;/p&gt;
&lt;p&gt;You may have noticed that in the previous code sample, the title of the button is returned as &lt;strong&gt;AppResources.NewGameButtonTitle&lt;/strong&gt; (instead of returning “New Game”).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; NewGameButtonTitle
{
    &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AppResources.NewGameButtonTitle; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is to make localization easy (well… easier!). Under my &lt;strong&gt;Locales&lt;/strong&gt; namespace there are two files:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/test-driven-development-tdd-and-windows-phone-7/locales.png&quot; alt=&quot;Locales&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AppResources.resx&lt;/strong&gt; is a resource file that contains default (in my case English) string values. In there, you’ll find that &lt;strong&gt;NewGameButtonTitle&lt;/strong&gt; refers to a string called “New Game”.&lt;/p&gt;
&lt;p&gt;As you may have guessed, &lt;strong&gt;AppResources.es-ES.resx&lt;/strong&gt; is the Spanish version of this resource file. In there, you’ll find that &lt;strong&gt;NewGameButtonTitle&lt;/strong&gt; refers to a string called “Nuevo Juego”&lt;/p&gt;
&lt;p&gt;In order to enable the Spanish localized version, we need to do a few things:&lt;/p&gt;
&lt;p&gt;Firstly, create separate resource files for all your languages, using the &lt;strong&gt;AppResources.[lang].resx &lt;/strong&gt;format as stated above.&lt;/p&gt;
&lt;p&gt;Next, in the .resx file, ensure that the access modifier is set to public.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/test-driven-development-tdd-and-windows-phone-7/resx.png&quot; alt=&quot;ResX&quot;&gt;&lt;/p&gt;
&lt;p&gt;(Otherwise, you’ll find that it just doesn’t offer the localized version).&lt;/p&gt;
&lt;p&gt;Them edit your .csproj file outside Visual Studio (using Notepad or similar). Add the supported country code in the &lt;strong&gt;SupportedCultures&lt;/strong&gt; tag.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;supportedcultures&lt;/span&gt;&amp;gt;&lt;/span&gt;es-ES&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;supportedcultures&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save the file and reload the project in Visual Studio.&lt;/p&gt;
&lt;p&gt;Once this is done, deploy the application to the emulator, and set the language of the emulator appropriately (Settings / Region and Language / Display Language). The emulator will restart.&lt;/p&gt;
&lt;p&gt;Finally, test your application. You should find that the new language strings are now used:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/test-driven-development-tdd-and-windows-phone-7/locale.png&quot; alt=&quot;Locale&quot;&gt;&lt;/p&gt;
&lt;p&gt;(My Spanish isn’t that good, so apologies for any mistakes above!).&lt;/p&gt;
&lt;p&gt;One word of caution: The testing process on the Windows Phone Marketplace is strict when it comes to supporting multiple languages. If you submit an application that supports multiple languages, you really need to make sure that &lt;em&gt;all&lt;/em&gt; strings are localized (and you provide localized screenshots and product descriptions) in order to pass the testing certification.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update: I’ve recently moved the source code for the project - you can now find it on &lt;a href=&quot;http://github.com/simonguest/flagmatch&quot;&gt;http://github.com/simonguest/flagmatch&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>JavaOne Tutorial Apache Tomcat on Windows Azure</title>
      <link>//2010/09/18/javaone-tutorial-apache-tomcat-on-windows-azure/</link>
      <pubDate>Sat, 18 Sep 2010 08:00:00 -0700</pubDate>
      <guid isPermaLink="true">//2010/09/18/javaone-tutorial-apache-tomcat-on-windows-azure/</guid>
      <author></author>
      <description>&lt;p&gt;As I mentioned in my previous post, I’ll be participating in a &lt;a href=&quot;http://www.eventreg.com/cc250/sessionDetail.jsp?SID=313962&quot;&gt;panel&lt;/a&gt; at JavaOne on Monday.  With a similar format to last year, each panelist is given 5 – 10 minutes before it opens up for general discussion. Rather than showing a bunch of marketing slides, I thought it would be more interesting to put together a short tutorial for running Apache Tomcat on Windows Azure.  When I speak with Java developers interested in Windows Azure, this is often the #1 request. Here is an overview of what I will be showing:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1 – What you’ll need to get started&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As you might imagine, you are going to first need a Windows Azure account.  I would recommend going to &lt;a href=&quot;http://www.microsoft.com/windowsazure/offers&quot;&gt;www.microsoft.com/windowsazure/offers&lt;/a&gt; and signing up for the introductory special, which will allow you to test your application for free.  The introductory offer gives you the first 25 hours at no cost, which should be more than enough time to get up and running.&lt;/p&gt;
&lt;p&gt;If you are at JavaOne however, I have a limited quantity (100) of tokens that give you 30 days worth of access with no need to submit any registration or credit card information.  See me at the end of the panel session or throughout the conference, and in exchange for a business card, I’ll be happy to give you one at no cost!&lt;/p&gt;
&lt;p&gt;After you have your account, you’ll want to download and install the &lt;a href=&quot;http://go.microsoft.com/fwlink/?LinkID=130232&quot;&gt;Windows Azure SDK&lt;/a&gt;.  After installation, set your PATH environment to include the location of the SDK binaries (typically &lt;em&gt;C:/Program Files/Windows Azure SDK/v1.1/bin&lt;/em&gt;).  This is important to ensure that the SDK is accessible from the command line.&lt;/p&gt;
&lt;p&gt;Finally, you’ll need to install the &lt;a href=&quot;http://code.msdn.microsoft.com/winazuretomcat&quot;&gt;Windows Azure Tomcat Solution Accelerator&lt;/a&gt;.  Feel free to install this in any directory you’d like – I’m using &lt;em&gt;c:/dev/javaone2010/tomcat/azure&lt;/em&gt; for the purposes of this tutorial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2 – Building and running your site&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With all of the pre-requisites downloaded and installed, it’s time to build and test your site.  To do this, open a command prompt, and navigate to the directory that you chose for the solution accelerator.  From this directory, run &lt;strong&gt;buildme.cmd&lt;/strong&gt;.  You’ll be prompted to provide the installation path of your Tomcat installation and a JRE on your machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/javaone-tutorial-apache-tomcat-on-windows-azure/image.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;After a successful build, run the &lt;strong&gt;runme.cmd&lt;/strong&gt; file. This will run Tomcat using the Windows Azure Desktop Execution Tool – also known as the local development fabric.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/javaone-tutorial-apache-tomcat-on-windows-azure/image1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/javaone-tutorial-apache-tomcat-on-windows-azure/image2.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is a great way to test that your application is going to work when deployed to production.  Navigate to the URL provided at the end (replace the tcp with http) to ensure that the Tomcat instance is working correctly on your local machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/javaone-tutorial-apache-tomcat-on-windows-azure/image3.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can open the development fabric tool (found running in your system tray) if you want to stop and/or investigate the service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3 – Packaging and deploying your site&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once you are satisfied that everything looks good, it’s time to package the application ready for deployment to the cloud.  To do this, run the &lt;strong&gt;packme.cmd &lt;/strong&gt;script.  This will invoke the Windows Azure Packaging Tool, and pull together everything needed into one package file for deployment.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/javaone-tutorial-apache-tomcat-on-windows-azure/image4.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;When this has completed, you should see a &lt;strong&gt;Tomcat.cspkg &lt;/strong&gt;file and a &lt;strong&gt;ServiceConfiguration.cscfg &lt;/strong&gt;file in the directory.  The .cspkg file is quite large as it contains your application, the Tomcat instance, and JRE binaries.  Despite the size, this format makes it convenient if you prefer to use a different version of Tomcat or a different JRE in the future.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/javaone-tutorial-apache-tomcat-on-windows-azure/image5.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;To deploy to the cloud, log on to the portal (&lt;a href=&quot;http://windows.azure.com&quot;&gt;http://windows.azure.com&lt;/a&gt;) and create a new hosted service.  Walk through the wizard to specify the name, description, URL, and location where you want the service to be deployed.  Next, hit the “Deploy” button and specify the location of the previous package and configuration file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/javaone-tutorial-apache-tomcat-on-windows-azure/image6.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;You have two options when it comes to deploying – either a file from your local storage (i.e. your local disk) or a file from an Azure storage account (blob storage).  If you have issues with the local storage (many http connections timeout before the package can be uploaded in time), I would recommend using &lt;a href=&quot;http://azurestorageexplorer.codeplex.com/&quot;&gt;Neudesic’s Azure Storage Explorer&lt;/a&gt; to upload your files to a blob storage container.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/javaone-tutorial-apache-tomcat-on-windows-azure/image7.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hit &lt;em&gt;Deploy&lt;/em&gt;, and your package will be uploaded to Windows Azure – this will likely take a few minutes because of the size of the deployment.&lt;/p&gt;
&lt;p&gt;Once this has been completed, hit the &lt;em&gt;Run&lt;/em&gt; button to bring your site to life.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/javaone-tutorial-apache-tomcat-on-windows-azure/image8.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/javaone-tutorial-apache-tomcat-on-windows-azure/image9.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once you have a site up and running, feel free to explore some of the ways that you can either scale your application to multiple nodes or explore some of the &lt;a href=&quot;http://www.windowsazure4j.org&quot;&gt;other features&lt;/a&gt; on Windows Azure available to Java developers.&lt;/p&gt;
&lt;p&gt;There are many ways that this could be improved by integrating with existing build environments (I think Maven integration would be fascinating), but hopefully this short tutorial gives you a starting point for getting a simple Tomcat site up and running on Windows Azure.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Easy Event Logging on Windows Azure</title>
      <link>//2010/08/04/easy-event-logging-on-windows-azure/</link>
      <pubDate>Wed, 04  Aug 2010 16:42:45 -0700</pubDate>
      <guid isPermaLink="true">//2010/08/04/easy-event-logging-on-windows-azure/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve been working on an application that has a need to log many events on a Web Role running on Windows Azure.   Effective logging can be difficult to setup.  Do a search, and you’ll find a handful of articles that cover logging to the blobstore, mounting drives to extract the logs, etc. Instead, I wanted an easy way to log custom events and exceptions in my application.  This is how to do it:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Create a class that inherits from System.Diagnostics.TraceListener. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; AzureTraceListener : TraceListener
{
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt; Events = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;String&amp;gt;();

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Write&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; message)
    {
        Events.Add(message);
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WriteLine&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; message)
    {
        Events.Add(message);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In your web role, add a reference to your custom trace listener.  This is done by adding the following two lines in your OnStart() method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;AzureTraceListener atl = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AzureTraceListener();
Trace.Listeners.Add(atl);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In your application, log your events using the Trace.Write(string) method.&lt;/p&gt;
&lt;p&gt;To display your events, create a new page called Traceviewer.aspx with the following block of HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Trace Log&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;vbscript&quot;&gt;&amp;lt;% foreach (&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; eventitem &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; WebRole1.AzureTraceListener.Events)
   {
       &lt;span class=&quot;built_in&quot;&gt;Response&lt;/span&gt;.Write(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;h4&amp;gt;&quot;&lt;/span&gt;+eventitem+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/h4&amp;gt;&quot;&lt;/span&gt;);
   }
%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it.  Deploy your application and simply call Traceviewer.aspx to look at all of your generated events.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>CITA-P – Certified IT Architect</title>
      <link>//2010/08/02/cita-p-certified-it-architect/</link>
      <pubDate>Mon, 02  Aug 2010 15:41:30 -0700</pubDate>
      <guid isPermaLink="true">//2010/08/02/cita-p-certified-it-architect/</guid>
      <author></author>
      <description>&lt;p&gt;Last week I took (and passed!) my &lt;a href=&quot;http://www.iasahome.org/web/home/certification/professional&quot;&gt;CITA-P&lt;/a&gt; examination.  CITA-P (Certified IT Architect) is a new certification, offered through &lt;a href=&quot;http://www.iasahome.org&quot;&gt;IASA&lt;/a&gt; (the International Association of Software Architects).  I wanted to share some thoughts on the certification, the process, and why you might want to consider applying yourself.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Certification&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The CITA-P certification evaluates an IT Architect across six core areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Business / Technology Mapping&lt;/li&gt;
&lt;li&gt;Design Skills&lt;/li&gt;
&lt;li&gt;Human Dynamics&lt;/li&gt;
&lt;li&gt;IT Environment&lt;/li&gt;
&lt;li&gt;Quality Attributes&lt;/li&gt;
&lt;li&gt;Software Architecture or Infrastructure Architecture (you pick one of the two)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of the above six areas has around ten or so subcategories which go into some detail.  There is a worksheet available &lt;a href=&quot;http://www.iasahome.org/c/document_library/get_file?uuid=a05a964c-8662-4df7-a3c0-a7fe99b6b771&amp;amp;groupId=25692&quot;&gt;here&lt;/a&gt; on the IASA site that covers all six, and can be very useful to reflect on your own strengths and weaknesses, even if you are not planning on taking the exam.&lt;/p&gt;
&lt;p&gt;The goal of the certification is to gauge your level of competency across each of these six areas.  The majority of this will of course be based on your knowledge, experience, and personal reflections.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Process&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Because it would be impossible (and indeed, wrong) to certify IT Architects through a multiple choice examination, the process of certification is an involved process, although very well structured.&lt;/p&gt;
&lt;p&gt;The first part requires submitting a set of documentation.  The details of what is required can be found in the &lt;a href=&quot;http://www.iasahome.org/c/document_library/get_file?uuid=79c2a82d-eea7-4d5a-bfea-0dab221f3563&amp;amp;groupId=25692&quot;&gt;application guide&lt;/a&gt;, and for my submission I decided to offer my perspectives and thoughts across the six certification areas.  I wrote a story about each, reflecting my experience, views, and examples of projects that I’ve been involved in.&lt;/p&gt;
&lt;p&gt;After submission, I received my date for the in-person board review, which is split into three parts:  The first part is a 30 minute presentation of your choosing.  The board is looking for experience across the certification areas, and also for communication skills.  Staying within the 30 minute timeslot and having a presentation that is both engaging and covers all of the areas is difficult, but important if you are going to be successful. &lt;/p&gt;
&lt;p&gt;Following the presentation comes a line of questioning, with each of the four board members given ten minutes to question you about your presentation.  The idea here is not to pick holes in the presentation or play &lt;a href=&quot;http://speakfearlessly.net/how-to-deal-with-the-stump-the-chump-dynamic-in-presentations/&quot;&gt;stump the chump&lt;/a&gt;, but merely to validate experience in areas that you may not have shown in the presentation.  A large amount of my presentation was based on a framework around cloud computing, so while I had many questions related to this, I also saw the board trying to relate the material to other areas which I didn’t mention in the material.&lt;/p&gt;
&lt;p&gt;After the first round of questioning, you are given a 15 minute break.  This is a great opportunity to get some water and gather your thoughts while the board compares notes to look for areas they might have missed.  Another round of questioning follows (4 x 10 minutes) on various topics and it’s all over.  After the board review concludes, the board members meet and you are given their decision together with helpful advice in a couple of days.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Good Thing?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Although this is my first experience, I’ve been a strong supporter of IT Architect certification since my time in the Platform Architecture Team here at Microsoft, and I believe it’s a good thing for the industry.&lt;/p&gt;
&lt;p&gt;We see many IT Architects in our industry today.  Most inherit that role during the natural evolution of their career.  Many of these are indeed valid IT Architects, but I have the impression that other are also riding on the cache of the title.  If we are going to grow this profession, it’s important that we standardize the areas and level of experience we expect from this role.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More Information?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For more information about CITA-P certification in your area, I would recommend getting in &lt;a href=&quot;http://www.iasahome.org/web/home/about/contact&quot;&gt;contact with IASA&lt;/a&gt; for more information.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Moving VHDs to the Cloud</title>
      <link>//2010/04/22/moving-vhds-to-the-cloud/</link>
      <pubDate>Thu, 22 Apr 2010 15:25:49 -0700</pubDate>
      <guid isPermaLink="true">//2010/04/22/moving-vhds-to-the-cloud/</guid>
      <author></author>
      <description>&lt;p&gt;When I speak with customers about cloud computing, a common question is often “how do I migrate an application to the cloud?”  While this is a multi-part answer, one of the hurdles for migration is often storage. &lt;/p&gt;
&lt;p&gt;Many applications store data using the file system (e.g. read / write a file to d:dataconfig.xml).  Moving these types of applications to the cloud can be difficult as the storage mechanisms in the cloud are somewhat different. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To help address this problem, in Feb 2010 we released v1.1 of the &lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyID=5664019e-6860-4c33-9843-4eb40b297ab6&amp;amp;DisplayLang=en&quot;&gt;Windows Azure SDK&lt;/a&gt; which supports a new feature call Cloud Drives.  A Cloud Drive is the ability to mount a virtual drive in the cloud so that applications can write to it as they would a local drive.  This cloud drive is persisted so that even if the machine goes down, the data is not lost.&lt;/p&gt;
&lt;p&gt;What many people don’t realize however is that the format that the Cloud Drive uses is interchangeable with the VHD (Virtual Hard Drive) format used by virtualization products such as Hyper-V, Virtual PC, Windows Server, and Windows 7.  What this means is that you can create a single VHD, use it locally on a Windows PC, attach it to a virtualized image, and now copy it to the cloud and access it there also.  As you can imagine, for anyone looking to migrate applications to the cloud, this opens up a world of possibilities.&lt;/p&gt;
&lt;p&gt;In this post, I’ll walk through a series of steps that show creating a VHD from scratch, copying it to the cloud, and accessing it from a web role running in Azure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before you begin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You’ll of course need an Azure account.  If you don’t have one, you can go &lt;a href=&quot;http://www.microsoft.com/windowsazure/account/&quot;&gt;here&lt;/a&gt; to sign up.&lt;/p&gt;
&lt;p&gt;Once you have your account, you’ll need to setup two new services. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/moving-vhds-to-the-cloud/image.png&quot; alt=&quot;image&quot;&gt; &lt;/p&gt;
&lt;p&gt;You’ll need to create a storage account – this is where the VHDs will be stored – and a hosted service to run your application from.  When you set them up, make sure that they are created in the same geography (i.e. don’t have your storage account in Asia, and your hosted service in the US as the drive mounting has to be in the same region).&lt;/p&gt;
&lt;p&gt;Once you have your storage account and service created, you are ready to create and upload your VHD. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1.  You’ll need a VHD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you already have a VHD file that you would like to use, you can skip to Step 2.  You’ll be copying this VHD to the cloud, so you may want to choose a smaller VHD file for test purposes.&lt;/p&gt;
&lt;p&gt;If you are running Windows 7, creating a new VHD is easy. &lt;/p&gt;
&lt;p&gt;Firstly, go to the start menu and type &lt;strong&gt;disk management&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;From the start menu click on &lt;strong&gt;Create and format hard disk partitions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/moving-vhds-to-the-cloud/image1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;This will open up the disk management tool.  From the &lt;strong&gt;Action&lt;/strong&gt; menu, select &lt;strong&gt;Create VHD&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/moving-vhds-to-the-cloud/image2.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Enter a location for the VHD file and a size.  The minimum is 16Mb and the maximum is likely the amount of free disk space on your machine. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/moving-vhds-to-the-cloud/image3.png&quot; alt=&quot;image&quot;&gt; &lt;/p&gt;
&lt;p&gt;When your disk appears in the management tool, right click on the disk name and select &lt;strong&gt;Initialize Disk&lt;/strong&gt;.  Select the default (MBR) and select OK.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/moving-vhds-to-the-cloud/image4.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;After initialization, right click on the disk and create a &lt;strong&gt;New Simple Volume&lt;/strong&gt;.  Walk through the wizard, accepting the defaults and assign a drive letter to the VHD.  Finally, format the disk using NTFS (a quick format is fine).  If a dialog box appears asking you to format the disk (sometimes the disk gets detected just before formatting has begun), just hit cancel.&lt;/p&gt;
&lt;p&gt;After this is done, you can open the drive and access it as you would any other drive. Add some files and folders, etc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/moving-vhds-to-the-cloud/image5.png&quot; alt=&quot;image&quot;&gt; &lt;/p&gt;
&lt;p&gt;When you are ready to upload to the cloud, you’ll need to detach the drive.  To do this, go back in to the disk management tool, right click on the disk name and select &lt;strong&gt;Detach VHD&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/moving-vhds-to-the-cloud/image6.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;(Do not select the Delete the virtual hard disk file checkbox – otherwise, they’ll be nothing to upload!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2.  Upload it to Azure Storage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The next step is to upload the VHD to the cloud.  The VHD will be stored in something called Blob (Binary Large OBject) storage.  You may have heard of blob storage if you’ve seen any of the introductory Azure presentations.  It’s the type of storage that is used for binary data such as images, videos, and the like.&lt;/p&gt;
&lt;p&gt;In February we enabled support for Page Blobs.  Page Blobs are binary objects stored in the cloud that support random read/writes through pages.  This makes them ideal for dealing with VHD type of access, and this is the format that we’ll be using to upload our VHD to the cloud.&lt;/p&gt;
&lt;p&gt;The one caveat of this is that you must use a tool that supports page blobs (most of the tools available today only support regular blobs).  The tool I would recommend is &lt;a href=&quot;http://www.cerebrata.com/Products/CloudStorageStudio/Default.aspx&quot;&gt;Cloud Storage Studio&lt;/a&gt; by Cerebrata as it supports page blobs through a nice interface.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/moving-vhds-to-the-cloud/image7.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Open the tool and access the storage account that you created in the “Before you begin” section earlier in this post. &lt;/p&gt;
&lt;p&gt;I would recommend creating a new container for your VHD images to keep them separate from other content.  As shown in the screenshot above, I’ve created a container called vhd.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/moving-vhds-to-the-cloud/image8.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Select the container, and click on the &lt;strong&gt;Upload Page Blob&lt;/strong&gt; button.  There are two upload buttons – you need the one with the icon that includes the page and the up arrow.&lt;/p&gt;
&lt;p&gt;Point to the location of your VHD file and click on the &lt;strong&gt;Upload&lt;/strong&gt; button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/moving-vhds-to-the-cloud/image9.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;This might take a little way depending on the size of your VHD and the speed of your network.&lt;/p&gt;
&lt;p&gt;Once you have uploaded the file, validate that it exists by hitting the refresh button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/moving-vhds-to-the-cloud/image10.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;With the VHD uploaded, we can now move on to creating the cloud application that accesses it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3.  Accessing the VHD from Windows Azure &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m going to assume that you have some knowledge of creating an ASP.NET application and uploading it to Windows Azure.  If you haven’t done this before, I would recommend checking out the &lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyID=413E88F8-5966-4A83-B309-53B7B77EDF78&amp;amp;displaylang=en&quot;&gt;Windows Azure Training Kit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To access the VHD in the cloud, we create a webrole and use the following code.&lt;/p&gt;
&lt;p&gt;Add reference to the &lt;strong&gt;Microsoft.WindowsAzure.CloudDrive.DLL&lt;/strong&gt; that can be found in the GAC (assuming that you have the &lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyID=dba6a576-468d-4ef6-877e-b14e3c865d3a&amp;amp;displaylang=en&quot;&gt;v1.1 SDK&lt;/a&gt; installed).  Then, in your webrole, you’ll need to add the following using statements:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; Microsoft.WindowsAzure;
&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; Microsoft.WindowsAzure.ServiceRuntime;
&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; Microsoft.WindowsAzure.StorageClient;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the code that you should run in your web role.  (You can place this behind a button or something…)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;String accountName = &amp;quot;&amp;quot;;  // insert your storage account name here
String accountKey = &amp;quot;”;  // insert your storage account primary key here
StorageCredentialsAccountAndKey credentials = new StorageCredentialsAccountAndKey(accountName, accountKey);

CloudStorageAccount storageAccount = new CloudStorageAccount(credentials, new Uri(String.Format(&amp;quot;http://{0}.blob.core.windows.net&amp;quot;,accountName)),new Uri(String.Format(&amp;quot;http://{0}.queue.core.windows.net&amp;quot;, accountName)),new Uri(String.Format(&amp;quot;http://{0}.table.core.windows.net&amp;quot;, accountName)));

// initialize the local cache - need to trim the end backslash otherwise, HRESULT=D0000033
LocalResource localCache = RoleEnvironment.GetLocalResource(&amp;quot;LocalCache&amp;quot;);
CloudDrive.InitializeCache(localCache.RootPath.TrimEnd(&amp;#39;&amp;#39;), localCache.MaximumSizeInMegabytes);

// Create and mount the drive
CloudDrive c = storageAccount.CreateCloudDrive(&amp;quot;vhd/myvhd.vhd&amp;quot;);
String driveLetter = c.Mount(localCache.MaximumSizeInMegabytes, DriveMountOptions.None);

// do regular System.IO.File and System.IO.Directory operations here against driveLetter
Response.Write(System.IO.Directory.GetFiles(driveLetter + &amp;quot;&amp;quot;).Count() + &amp;quot; files found on the root of the mounted drive.&amp;quot;);

// unmount the drive
c.Unmount();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are five main pieces to the code.&lt;/p&gt;
&lt;p&gt;Firstly, the storage account reference is created using the account name and key that you retrieve when you setup your Azure account.&lt;/p&gt;
&lt;p&gt;After that we need to initialize a local cache used by the cloud drive.  To create this, insert the following code into your ServiceDefinition.csdef file on your webrole.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;LocalResources&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;LocalStorage&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;LocalCache&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;cleanOnRoleRecycle&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;sizeInMB&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;100&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;LocalResources&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then create and mount the drive using the &lt;strong&gt;CreateCloudDrive&lt;/strong&gt; and &lt;strong&gt;Mount&lt;/strong&gt; methods.  Make sure that the path and name to your VHD matches what you uploaded in Step 2.&lt;/p&gt;
&lt;p&gt;Once the drive is mounted we get a drive letter (as a string – e.g. “f:”).  You can then make calls to that drive letter using the regular calls (e.g. &lt;strong&gt;System.IO.File&lt;/strong&gt; and &lt;strong&gt;System.IO.Directory&lt;/strong&gt;).  In a worker role you can even launch applications from the VHD by spawning a new process. &lt;/p&gt;
&lt;p&gt;Finally, to unmount the drive, just call the &lt;strong&gt;Unmount&lt;/strong&gt; method to release the VHD image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/moving-vhds-to-the-cloud/image11.png&quot; alt=&quot;image&quot;&gt; &lt;/p&gt;
&lt;p&gt;There are a lot of details behind the scenes that I’m not going to go into here (e.g. read and read/write access to the VHD)  - if you want to learn more, I would recommend checking out &lt;a href=&quot;http://microsoftpdc.com/Sessions/SVC14&quot;&gt;this PDC session&lt;/a&gt; by Brad Calder&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Appendix.  Running this in a local development environment.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You should note that uploading a VHD only works using a live deployment in the cloud.  In the local development fabric, you’ll find that you cannot access a remote VHD (you’ll get a HRESULT = 80070003 error).  Also, you can’t upload a page blob to local development storage.&lt;/p&gt;
&lt;p&gt;However, you can still duplicate the same functionality in the local development environment by using this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Setup the account details&lt;/span&gt;
CloudStorageAccount storageAccount = CloudStorageAccount.DevelopmentStorageAccount;
&lt;span class=&quot;comment&quot;&gt;// initialize the local cache - need to trim the end backslash otherwise, HRESULT=D0000033&lt;/span&gt;
LocalResource localCache = RoleEnvironment.GetLocalResource(&lt;span class=&quot;string&quot;&gt;&quot;LocalCache&quot;&lt;/span&gt;);
CloudDrive.InitializeCache(localCache.RootPath.TrimEnd(&lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;), localCache.MaximumSizeInMegabytes);

&lt;span class=&quot;comment&quot;&gt;// Create and mount the drive&lt;/span&gt;
CloudDrive c = storageAccount.CreateCloudDrive(&lt;span class=&quot;string&quot;&gt;&quot;vhd/myvhd.vhd&quot;&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// try creating the drive if it doesn't exist&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;
{
        c.Create(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);
}
        &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception)
{
         &lt;span class=&quot;comment&quot;&gt;// ignore - VHD folder already exists&lt;/span&gt;
}

String driveLetter = c.Mount(localCache.MaximumSizeInMegabytes, DriveMountOptions.None);

&lt;span class=&quot;comment&quot;&gt;// do regular System.IO.File and System.IO.Directory operations here against driveLetter&lt;/span&gt;
Response.Write(System.IO.Directory.GetFiles(driveLetter + &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;).Count() + &lt;span class=&quot;string&quot;&gt;&quot; files found on the root of the mounted drive.&quot;&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// unmount the drive&lt;/span&gt;
c.Unmount();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a couple of differences from the live environment.&lt;/p&gt;
&lt;p&gt;Firstly, instead of using the public account details, we can just make a call to &lt;strong&gt;CloudStorageAccount.DevelopmentStorageAccount&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Secondly, just before we mount the drive we actually try to create it using the &lt;strong&gt;c.Create(16)&lt;/strong&gt; command.  If it already exists, then it throws an exception that we just ignore.&lt;/p&gt;
&lt;p&gt;It’s important to know that this doesn’t actually create a VHD file. Instead, it creates a new directory in this folder:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c:users[username]AppDataLocaldftmpwadddevstoreaccount1vhd&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can now access this folder through Windows Explorer, go into the .vhd folder and add/remove files as you wish.  Once you are ready to move to a production environment you simply copy the files from this directory in to a new VHD (as created in Step 1), upload, and switch to the production code.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Using Windows 7 to host PHP applications in 5 easy steps!</title>
      <link>//2009/03/08/using-windows-7-to-host-php-applications-in-5-easy-steps/</link>
      <pubDate>Sun, 08 Mar 2009 17:24:55 -0700</pubDate>
      <guid isPermaLink="true">//2009/03/08/using-windows-7-to-host-php-applications-in-5-easy-steps/</guid>
      <author></author>
      <description>&lt;p&gt;A few people have asked me recently whether it’s possible to setup Windows 7 as a PHP server (for development purposes).  The answer is absolutely yes, and it’s a breeze to setup.  Follow these five simple steps to get PHP up and running in minutes.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the &lt;strong&gt;Programs and Features &lt;/strong&gt;control panel, click on the &lt;strong&gt;Turn Windows features on or off&lt;/strong&gt; link:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the list of Windows Features, expand&lt;strong&gt; Internet Information Services&lt;/strong&gt;, &lt;strong&gt;World Wide Web Services&lt;/strong&gt;, and the &lt;strong&gt;Application Deployment Features&lt;/strong&gt;.  If it’s not already, select the &lt;strong&gt;CGI&lt;/strong&gt; checkbox and click OK.  (The most reliable way of hosting PHP applications on Windows 7 is to use the built in FastCGI interface for IIS – checking this box installs it together with any pre-requisites.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download the &lt;strong&gt;non-thread-safe&lt;/strong&gt; &lt;strong&gt;(NTS) &lt;/strong&gt;version of PHP from &lt;a href=&quot;http://www.php.net/downloads.php&quot;&gt;http://www.php.net/downloads.php&lt;/a&gt;.  The current version (as of time of writing is 5.2.9).  (The thread safe (TS) version will also work, but generally NTS is faster, and thread safety is not an issue under FastCGI).  Expand the zip to an installation directory of your choice – e.g. c:devphp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the &lt;strong&gt;php.ini-recommended &lt;/strong&gt;file to &lt;strong&gt;php.ini &lt;/strong&gt;in the PHP directory.  Edit the php.ini file and add correctly configure &lt;strong&gt;extension_dir&lt;/strong&gt;, pointing to the PHP extensions directory (normally the .ext folder of the PHP installation – e.g c:devphpext).  You can also configure other php.ini options and modules here if required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;strong&gt;Internet Information Services Manager&lt;/strong&gt; by typing &lt;strong&gt;inetmgr&lt;/strong&gt; in the Start menu.  You can either set the global settings of the server, or (recommended) add a new web site to run the PHP applications.  Once you’ve done this, double click on the &lt;strong&gt;Handler Mappings &lt;/strong&gt;for the site and add a new module mapping with the following settings:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Request path &lt;/strong&gt;should be set to &lt;em&gt;.php.  &lt;strong&gt;Module&lt;/strong&gt; should be FastCgiModule.  &lt;strong&gt;Executable&lt;/strong&gt; should be {php_install_dir}php-cgi.exe.  &lt;em&gt;*Name&lt;/em&gt;&lt;/em&gt; can be anything – I use “PHP via Fast CGI”.&lt;/p&gt;
&lt;p&gt;That’s it! Simply start/restart IIS and you are ready to go.  The easiest way to test that everything is working is to create a simple info.php file with a single line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?php&lt;/span&gt; phpinfo(); &lt;span class=&quot;preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you access this page from a browser (e.g. &lt;a href=&quot;http://localhost:8081/info.php&quot;&gt;http://localhost:8081/info.php&lt;/a&gt;), you should see the PHP info screen.&lt;/p&gt;
&lt;p&gt;Validate that the server API is using CGI/FastCGI and that the loaded configuration file is the one in your installation directory.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>